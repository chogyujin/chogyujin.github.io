<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>HyG</title>
    <description>浩阳的博客 前端爱好者</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 23 Jan 2019 21:59:05 -0800</pubDate>
    <lastBuildDate>Wed, 23 Jan 2019 21:59:05 -0800</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>JavaScript 作用域和作用域链</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#javascript-作用域&quot; id=&quot;markdown-toc-javascript-作用域&quot;&gt;JavaScript 作用域&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#全局作用域global-scope&quot; id=&quot;markdown-toc-全局作用域global-scope&quot;&gt;全局作用域(Global Scope)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#局部作用域local-scope&quot; id=&quot;markdown-toc-局部作用域local-scope&quot;&gt;局部作用域(Local Scope)&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#作用域链scope-chain&quot; id=&quot;markdown-toc-作用域链scope-chain&quot;&gt;作用域链(Scope Chain)&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#代码优化&quot; id=&quot;markdown-toc-代码优化&quot;&gt;代码优化&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#参考资料&quot; id=&quot;markdown-toc-参考资料&quot;&gt;参考资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;javascript-作用域&quot;&gt;JavaScript 作用域&lt;/h2&gt;

&lt;p&gt;作用域就是变量与函数的可访问范围。在JavaScript中，变量的作用域有全局作用域和局部作用域两种。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;全局作用域global-scope&quot;&gt;全局作用域(Global Scope)&lt;/h3&gt;

&lt;p&gt;在代码中任何地方都能访问到的对象拥有全局作用域，一般来说以下 3 种情形拥有全局作用域。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;最外层函数和在最外层函数外面定义的变量拥有全局作用域&lt;/li&gt;
  &lt;li&gt;所有末定义直接赋值的变量自动声明为拥有全局作用域&lt;/li&gt;
  &lt;li&gt;所有window对象的属性拥有全局作用域 &lt;br /&gt;
 window对象的内置属性都拥有全局作用域，例如window.name、window.location、window.top等。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;局部作用域local-scope&quot;&gt;局部作用域(Local Scope)&lt;/h3&gt;

&lt;p&gt;和全局作用域相反，局部作用域一般只在固定的代码片段内可访问到，最常见的例如函数内部，所有在一些地方也会看到有人把这种作用域称为函数作用域
。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;作用域链scope-chain&quot;&gt;作用域链(Scope Chain)&lt;/h2&gt;

&lt;p&gt;在 JavaScript 中，函数也是对象，实际上，JavaScript 里一切都是对象。函数对象和其它对象一样，拥有可以通过代码访问的属性和一系列仅供 JavaScript 引擎访问的内部属性。其中一个内部属性是 [[Scope]]，由 ECMA-262 标准第三版定义，该内部属性包含了函数被创建的作用域中对象的集合，这个集合被称为函数的作用域链，它决定了哪些数据能被函数访问。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;在函数创建时，它的作用域链中会填入一个全局对象，该全局对象包含了所有全局变量。&lt;/li&gt;
  &lt;li&gt;函数执行时会创建一个称为“运行期上下文(execution context)”的内部对象，运行期上下文定义了函数执行时的环境。每个运行期上下文都有自己的作用域链，用于标识符解析，当运行期上下文被创建时，而它的作用域链初始化为当前运行函数的[[Scope]]所包含的对象。&lt;/li&gt;
  &lt;li&gt;这些值按照它们出现在函数中的顺序被复制到运行期上下文的作用域链中。它们共同组成了一个新的对象，叫“活动对象(activation object)”，该对象包含了函数的所有局部变量、命名参数、参数集合以及this，然后此对象会被推入作用域链的前端。&lt;/li&gt;
  &lt;li&gt;当运行期上下文被销毁，活动对象也随之销毁。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在函数执行过程中，每遇到一个变量，都会经历一次标识符解析过程以决定从哪里获取和存储数据。该过程从作用域链头部，也就是从活动对象开始搜索，查找同名的标识符，如果找到了就使用这个标识符对应的变量，如果没找到继续搜索作用域链中的下一个对象，如果搜索完所有对象都未找到，则认为该标识符未定义。函数执行过程中，每个标识符都要经历这样的搜索过程。&lt;/p&gt;

&lt;h3 id=&quot;代码优化&quot;&gt;代码优化&lt;/h3&gt;

&lt;p&gt;从作用域链的结构可以看出，在运行期上下文的作用域链中，标识符所在的位置越深，读写速度就会越慢。如上图所示，因为全局变量总是存在于运行期上下文作用域链的最末端，因此在标识符解析的时候，查找全局变量是最慢的。所以，在编写代码的时候应尽量少使用全局变量，尽可能使用局部变量。一个好的经验法则是：如果一个跨作用域的对象被引用了一次以上，则先把它存储到局部变量里再使用。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.laruence.com/2009/05/28/863.html&quot;&gt;鸟哥：Javascript作用域原理&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/lhb25/archive/2011/09/06/javascript-scope-chain.html&quot;&gt;理解 JavaScript 作用域和作用域链&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 20 May 2015 07:06:05 -0700</pubDate>
        <link>/2015/05/20/scope/</link>
        <guid isPermaLink="true">/2015/05/20/scope/</guid>
        
        
        <category>Front-end</category>
        
        <category>JavaScript</category>
        
      </item>
    
      <item>
        <title>前端的一些资料和工具</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#色彩与图标&quot; id=&quot;markdown-toc-色彩与图标&quot;&gt;色彩与图标&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#css滤镜&quot; id=&quot;markdown-toc-css滤镜&quot;&gt;CSS滤镜&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#渐变css代码生成器&quot; id=&quot;markdown-toc-渐变css代码生成器&quot;&gt;渐变CSS代码生成器&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#qq截图取色-16进制&quot; id=&quot;markdown-toc-qq截图取色-16进制&quot;&gt;QQ截图取色-16进制&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#配色&quot; id=&quot;markdown-toc-配色&quot;&gt;配色&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#图标&quot; id=&quot;markdown-toc-图标&quot;&gt;图标&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#数据处理&quot; id=&quot;markdown-toc-数据处理&quot;&gt;数据处理&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#json&quot; id=&quot;markdown-toc-json&quot;&gt;Json&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这里记录一些我用到的或者见到的比较好用方便的前端开发相关的工具吧。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;色彩与图标&quot;&gt;色彩与图标&lt;/h2&gt;

&lt;h3 id=&quot;css滤镜&quot;&gt;CSS滤镜&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cssreflex.com/css-generators/filter&quot;&gt;Filter Effects&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;界面：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7q5cdt.com1.z0.glb.clouddn.com/blog-filter.png&quot; alt=&quot;Filter Effects&quot; /&gt;&lt;/p&gt;

&lt;p&gt;有各种各样的滤镜效果，可以直接调节参数观察变化。&lt;/p&gt;

&lt;p&gt;值得一提的是，这个网站还有很多其他 css 生成器。&lt;/p&gt;

&lt;p&gt;比如：Border Image, Border Radius, Box Shadow, Filter Effects, Multi-Column, Outline Border, Overflow(x,y), RGBa, Text Rotate, Text Shadow, Textarea Resize, Transform&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;可以访问这里去使用这些 css 生成器：&lt;a href=&quot;http://www.cssreflex.com/css-generators/&quot;&gt;CSS Generators&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;渐变css代码生成器&quot;&gt;渐变CSS代码生成器&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.colorzilla.com/gradient-editor/&quot;&gt;Ultimate CSS Gradient Generator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;界面如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7q5cdt.com1.z0.glb.clouddn.com/blog-color-gradient.png&quot; alt=&quot;Ultimate CSS Gradient Generator&quot; /&gt;&lt;/p&gt;

&lt;p&gt;目前 css 写渐变还很复杂，但是用了这个工具简直太方便了，直接生成 css 代码，还能兼容 ie。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;qq截图取色-16进制&quot;&gt;QQ截图取色-16进制&lt;/h3&gt;

&lt;p&gt;在按下 &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl+Shift+A&lt;/code&gt; 后，再按一下 &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl&lt;/code&gt; 就可以看到截图框下面的颜色代码变成16进制的代码了。&lt;/p&gt;

&lt;p&gt;如下图：&lt;/p&gt;

&lt;p&gt;普通截图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7q5cdt.com1.z0.glb.clouddn.com/blog-RBGScreenColor.png&quot; alt=&quot;normal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;按住 &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl&lt;/code&gt;：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7q5cdt.com1.z0.glb.clouddn.com/blog-hexSreenColor.png&quot; alt=&quot;press ctrl&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看到第一幅图中的 51, 51, 51 变成了 #333333。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;配色&quot;&gt;配色&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://nipponcolors.com/&quot;&gt;nipponcolors&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;日本的一个配色网站。罗列了很多不饱和经典的颜色，当然，自己选配还是很重要的。&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://7q5cdt.com1.z0.glb.clouddn.com/blog-chooseColor.png&quot; alt=&quot;nipponcolors&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://color.adobe.com/zh/explore/most-popular/?time=all&quot;&gt;Adobe Color CC&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;Adobe 出的在线配色工具，里面有些现成的配色方案还是很不错的。&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://7q5cdt.com1.z0.glb.clouddn.com/blog-adobeColorCC.png&quot; alt=&quot;Adobe Color CC&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://paletton.com/&quot;&gt;paletton&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;提供了各种预览模式，可以在模板网站中预览，在色块中预览。&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://7q5cdt.com1.z0.glb.clouddn.com/blog-paletton.png&quot; alt=&quot;paletton&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;图标&quot;&gt;图标&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://www.easyicon.net/&quot;&gt;easyicon&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;对中文的搜索支持很好。实际上它是先把中文翻译为英文再搜索的。&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://7q5cdt.com1.z0.glb.clouddn.com/blog-icon.png&quot; alt=&quot;easyicon&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;数据处理&quot;&gt;数据处理&lt;/h2&gt;

&lt;h3 id=&quot;json&quot;&gt;Json&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://braincast.nl/samples/jsoneditor/&quot;&gt;json editor&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;将json数据输入进去，会生成一个树形的结构，方便查看每个节点。&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://7q5cdt.com1.z0.glb.clouddn.com/blog-json.png&quot; alt=&quot;jsoneditor&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;本文不定期更新。&lt;/p&gt;
</description>
        <pubDate>Mon, 18 May 2015 07:06:05 -0700</pubDate>
        <link>/2015/05/18/front-end-tools/</link>
        <guid isPermaLink="true">/2015/05/18/front-end-tools/</guid>
        
        
        <category>Front-end</category>
        
      </item>
    
      <item>
        <title>百度Web前端技术学院(2)-JavaScript 基础</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#任务&quot; id=&quot;markdown-toc-任务&quot;&gt;任务&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#第一个页面交互&quot; id=&quot;markdown-toc-第一个页面交互&quot;&gt;第一个页面交互&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#了解javascript是什么&quot; id=&quot;markdown-toc-了解javascript是什么&quot;&gt;了解JavaScript是什么&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#如何在-html-页面加载-javascript-代码&quot; id=&quot;markdown-toc-如何在-html-页面加载-javascript-代码&quot;&gt;如何在 HTML 页面加载 JavaScript 代码&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#为什么把-script-放在-body-前&quot; id=&quot;markdown-toc-为什么把-script-放在-body-前&quot;&gt;为什么把 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 放在 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; 前&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#javascript-的性能优化加载和执行&quot; id=&quot;markdown-toc-javascript-的性能优化加载和执行&quot;&gt;JavaScript 的性能优化：加载和执行&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#javascript数据类型及语言基础&quot; id=&quot;markdown-toc-javascript数据类型及语言基础&quot;&gt;JavaScript数据类型及语言基础&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#数据类型概要&quot; id=&quot;markdown-toc-数据类型概要&quot;&gt;数据类型概要&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#一些要点&quot; id=&quot;markdown-toc-一些要点&quot;&gt;一些要点&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#实践判断各种数据类型的方法&quot; id=&quot;markdown-toc-实践判断各种数据类型的方法&quot;&gt;实践判断各种数据类型的方法&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#数组类型&quot; id=&quot;markdown-toc-数组类型&quot;&gt;数组类型&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#值类型和引用类型的区别&quot; id=&quot;markdown-toc-值类型和引用类型的区别&quot;&gt;值类型和引用类型的区别&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#对象的读取遍历方式&quot; id=&quot;markdown-toc-对象的读取遍历方式&quot;&gt;对象的读取、遍历方式&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#深度克隆&quot; id=&quot;markdown-toc-深度克隆&quot;&gt;深度克隆&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#对数组进行去重&quot; id=&quot;markdown-toc-对数组进行去重&quot;&gt;对数组进行去重&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#array-对象&quot; id=&quot;markdown-toc-array-对象&quot;&gt;Array 对象&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#实现-trim&quot; id=&quot;markdown-toc-实现-trim&quot;&gt;实现 &lt;code class=&quot;highlighter-rouge&quot;&gt;trim()&lt;/code&gt;&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#正则表达式&quot; id=&quot;markdown-toc-正则表达式&quot;&gt;正则表达式&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#string对象&quot; id=&quot;markdown-toc-string对象&quot;&gt;String对象&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#遍历数组使每一个元素执行-fn-函数&quot; id=&quot;markdown-toc-遍历数组使每一个元素执行-fn-函数&quot;&gt;遍历数组，使每一个元素执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;fn&lt;/code&gt; 函数&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#获取对象中第一层元素个数&quot; id=&quot;markdown-toc-获取对象中第一层元素个数&quot;&gt;获取对象中第一层元素个数&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#正则表达式-1&quot; id=&quot;markdown-toc-正则表达式-1&quot;&gt;正则表达式&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#dom&quot; id=&quot;markdown-toc-dom&quot;&gt;DOM&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#基本任务&quot; id=&quot;markdown-toc-基本任务&quot;&gt;基本任务&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#mini-&quot; id=&quot;markdown-toc-mini-&quot;&gt;mini $&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#事件&quot; id=&quot;markdown-toc-事件&quot;&gt;事件&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#绑定注册事件与移除事件&quot; id=&quot;markdown-toc-绑定注册事件与移除事件&quot;&gt;绑定注册事件与移除事件&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#click-与-enter-键事件绑定&quot; id=&quot;markdown-toc-click-与-enter-键事件绑定&quot;&gt;click 与 enter 键事件绑定&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#事件代理&quot; id=&quot;markdown-toc-事件代理&quot;&gt;事件代理&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#bom&quot; id=&quot;markdown-toc-bom&quot;&gt;BOM&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#ajax&quot; id=&quot;markdown-toc-ajax&quot;&gt;Ajax&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#练习1处理兴趣列表&quot; id=&quot;markdown-toc-练习1处理兴趣列表&quot;&gt;练习1：处理兴趣列表&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#任务要求&quot; id=&quot;markdown-toc-任务要求&quot;&gt;任务要求&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#思路&quot; id=&quot;markdown-toc-思路&quot;&gt;思路&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#实现&quot; id=&quot;markdown-toc-实现&quot;&gt;实现&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#练习2倒计时&quot; id=&quot;markdown-toc-练习2倒计时&quot;&gt;练习2：倒计时&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#任务要求-1&quot; id=&quot;markdown-toc-任务要求-1&quot;&gt;任务要求&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#思路-1&quot; id=&quot;markdown-toc-思路-1&quot;&gt;思路&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#实现-1&quot; id=&quot;markdown-toc-实现-1&quot;&gt;实现&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#练习3图片轮播&quot; id=&quot;markdown-toc-练习3图片轮播&quot;&gt;练习3：图片轮播&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#任务要求-2&quot; id=&quot;markdown-toc-任务要求-2&quot;&gt;任务要求&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#思路-2&quot; id=&quot;markdown-toc-思路-2&quot;&gt;思路&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#实现-2&quot; id=&quot;markdown-toc-实现-2&quot;&gt;实现&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#关于变速运动&quot; id=&quot;markdown-toc-关于变速运动&quot;&gt;关于变速运动&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#练习4输入框即时提示&quot; id=&quot;markdown-toc-练习4输入框即时提示&quot;&gt;练习4：输入框即时提示&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#任务要求-3&quot; id=&quot;markdown-toc-任务要求-3&quot;&gt;任务要求&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#思路-3&quot; id=&quot;markdown-toc-思路-3&quot;&gt;思路&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#实现-3&quot; id=&quot;markdown-toc-实现-3&quot;&gt;实现&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#练习5拖拽交互&quot; id=&quot;markdown-toc-练习5拖拽交互&quot;&gt;练习5：拖拽交互&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#任务要求-4&quot; id=&quot;markdown-toc-任务要求-4&quot;&gt;任务要求&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#思路-4&quot; id=&quot;markdown-toc-思路-4&quot;&gt;思路&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#实现-4&quot; id=&quot;markdown-toc-实现-4&quot;&gt;实现&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#最终作品&quot; id=&quot;markdown-toc-最终作品&quot;&gt;最终作品&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;任务&quot;&gt;任务&lt;/h2&gt;

&lt;p&gt;掌握JavaScript基础知识，能够使用JavaScript编写一些复杂度不大的交互功能。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;任务：&lt;/strong&gt; &lt;a href=&quot;https://github.com/Gaohaoyang/ife/tree/master/task/task0002&quot;&gt;JavaScript基础&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;做完任务一的时候深深地感觉到自己的基础非常的薄弱，在这里再次感谢一下百度前端技术学院，做任务的时候深刻理解了自己平时掌握不牢固的内容，比如浮动、BFC、等高布局等。继续加油吧！&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;像上一篇文章一样，写些东西记录一下。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;第一个页面交互&quot;&gt;第一个页面交互&lt;/h2&gt;

&lt;p&gt;按照任务中的代码，在IE8下提示：&lt;code class=&quot;highlighter-rouge&quot;&gt;对象不支持“addEventListener”属性或方法&lt;/code&gt;  &lt;br /&gt;
我猜是IE8浏览器没有这个方法吧。&lt;/p&gt;

&lt;p&gt;参考资料：&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide&quot;&gt;JavaScript 指南-MDN&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;了解javascript是什么&quot;&gt;了解JavaScript是什么&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/JavaScript_Overview#What_is_JavaScript.3F&quot;&gt;来自MDN的解释&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;JavaScript 是一种跨平台，面向对象的脚本语言。作为一种小巧且轻量级的语言，JavaScript 无意于独立运行，而是被设计为可以轻易嵌入到其它的产品和应用中，比如 Web 浏览器。在宿主环境中，JavaScript 可以被连接到环境中的对象之上，以提供对其的编程控制。&lt;/p&gt;

  &lt;p&gt;核心的 JavaScript 中包含有一组核心的对象，包括 Array，Date 和 Math，以及一组核心的语言要素，包括操作符，控制结构和语句。出于多种目的，可以通过为其增补附加的对象，对核心 JavaScript 加以扩展；例如：&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;客户端 JavaScript 提供了用于控制浏览器（Navigator 或者其它浏览器）以及其中的文档对象模型（DOM）的对象，从而扩展了核心 JavaScript。例如，客户端扩展允许应用程序在 HTML 的表单中加入元素，以便响应用户事件，比如鼠标点击，表单输入和页面导航。&lt;/li&gt;
    &lt;li&gt;服务器端 JavaScript 提供了服务于在服务器上运行 JavaScript 的对象，从而扩展了核心 JavaScript。例如，服务器端扩展可以允许应用程序访问关系型数据库，在应用程序的不同调用间提供信息的连续性，甚至于处理服务器之上的文件。&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;借由 JavaScript 的 LiveConnect 功能，您可以让 Java 和 JavaScript 间实现通讯。从 JavaScript 中，您可以创建 Java 对象并访问它们的公共方法和域。从 Java 中，也可以访问 JavaScript 的对象，属性和方法。&lt;/p&gt;

  &lt;p&gt;Netscape 发明了 JavaScript 并将 JavaScript 首先用于 Netscape 浏览器中。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;如何在-html-页面加载-javascript-代码&quot;&gt;如何在 HTML 页面加载 JavaScript 代码&lt;/h3&gt;

&lt;p&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签在 HTML 文件中添加 JavaScript 代码。&lt;/p&gt;

&lt;p&gt;我们可以将 &lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; 代码放在 &lt;code class=&quot;highlighter-rouge&quot;&gt;html&lt;/code&gt; 文件中任何位置，但是我们一般放在网页的 &lt;code class=&quot;highlighter-rouge&quot;&gt;head&lt;/code&gt; 或者 &lt;code class=&quot;highlighter-rouge&quot;&gt;body&lt;/code&gt; 部分。&lt;/p&gt;

&lt;p&gt;放在 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;head&amp;gt;&lt;/code&gt; 部分  &lt;br /&gt;
最常用的方式是在页面中head部分放置 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 元素，浏览器解析 &lt;code class=&quot;highlighter-rouge&quot;&gt;head&lt;/code&gt; 部分就会执行这个代码，然后才解析页面的其余部分。&lt;/p&gt;

&lt;p&gt;放在 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt; 部分  &lt;br /&gt;
JavaScript 代码在网页读取到该语句的时候就会执行。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;: javascript 作为一种脚本语言可以放在 html 页面中任何位置，但是浏览器解释 html 时是按先后顺序的，所以前面的 script 就先被执行。比如进行页面显示初始化的 js 必须放在 head 里面，因为初始化都要求提前进行（如给页面 body 设置 css 等）；而如果是通过事件调用执行的 function 那么对位置没什么要求的。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;为什么把-script-放在-body-前&quot;&gt;为什么把 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 放在 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; 前&lt;/h3&gt;

&lt;p&gt;虽然理论上放在哪里都是可以的，但是对于前端页面优化来讲，还是放在底部是最佳的，因为如果JS执行出现错误了，最起码页面中的元素还能加载出来，因为DOM文档是从上往下的顺序执行的。    如果你还不了解DOM的加载顺序，请阅读jQuery中ready与load事件的区别。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;下面是重点&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;按照HTML5标准中的HTML语法规则，如果在 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; 后再出现 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 或任何元素的开始标签，都是parse error，浏览器会忽略之前的 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; ，即视作仍旧在body内。所以实际效果和写在 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; 之前是没有区别的。&lt;/p&gt;

&lt;p&gt;总之，这种写法虽然也能work，但是并没有带来任何额外好处，实际上出现这样的写法很可能是误解了“将script放在页面最末端”的教条。所以还是不要这样写为好。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.zhihu.com/question/20027966&quot;&gt;script在body闭合标签之后还是之前-知乎&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.zhihu.com/question/19617126&quot;&gt;body 和 html 标签均没有关闭&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;javascript-的性能优化加载和执行&quot;&gt;JavaScript 的性能优化：加载和执行&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;扩展阅读：&lt;a href=&quot;http://www.ibm.com/developerworks/cn/web/1308_caiys_jsload/index.html&quot;&gt;JavaScript 的性能优化：加载和执行&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;脚本位置&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;由于脚本会阻塞页面其他资源的下载，因此推荐将所有 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签尽可能放到 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt; 标签的底部，以尽量减少对整个页面下载的影响。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;组织脚本&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;由于每个 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签初始下载时都会阻塞页面渲染，所以减少页面包含的 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签数量有助于改善这一情况。这不仅针对外链脚本，内嵌脚本的数量同样也要限制。浏览器在解析 HTML 页面的过程中每遇到一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签，都会因执行脚本而导致一定的延时，因此最小化延迟时间将会明显改善页面的总体性能。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;无阻塞的脚本&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;减少 JavaScript 文件大小并限制 HTTP 请求数在功能丰富的 Web 应用或大型网站上并不总是可行。Web 应用的功能越丰富，所需要的 JavaScript 代码就越多，尽管下载单个较大的 JavaScript 文件只产生一次 HTTP 请求，却会锁死浏览器的一大段时间。为避免这种情况，需要通过一些特定的技术向页面中逐步加载 JavaScript 文件，这样做在某种程度上来说不会阻塞浏览器。&lt;/p&gt;

&lt;p&gt;无阻塞脚本的秘诀在于，在页面加载完成后才加载 JavaScript 代码。这就意味着在 window 对象的 onload事件触发后再下载脚本。有多种方式可以实现这一效果。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;延迟加载脚本&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;HTML 4 为 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签定义了一个扩展属性：defer。Defer 属性指明本元素所含的脚本不会修改 DOM，因此代码能安全地延迟执行。&lt;/p&gt;

&lt;p&gt;带有 defer 属性的 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签可以放置在文档的任何位置。对应的 JavaScript 文件将在页面解析到 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签时开始下载，但不会执行，直到 DOM 加载完成，即onload事件触发前才会被执行。当一个带有 defer 属性的 JavaScript 文件下载时，它不会阻塞浏览器的其他进程，因此这类文件可以与其他资源文件一起并行下载。&lt;/p&gt;

&lt;p&gt;对于如下代码：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Script Defer Example&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;defer&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;defer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;script&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;load&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在支持 defer 属性的浏览器上，弹出的顺序则是：”script”、”defer”、”load”。请注意，带有 defer 属性的 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 元素不是跟在第二个后面执行，而是在 onload 事件被触发前被调用。&lt;/p&gt;

&lt;p&gt;引用的资料可能写的比较早，在 &lt;a href=&quot;http://caniuse.com/#search=defer&quot;&gt;CanIUse&lt;/a&gt; 上查了一下 defer 发现大部分浏览器都是支持的。如下图： &lt;br /&gt;
&lt;img src=&quot;http://7q5cdt.com1.z0.glb.clouddn.com/Baidu-Front-end-defer.jpg&quot; alt=&quot;defer的支持情况&quot; /&gt;&lt;/p&gt;

&lt;p&gt;HTML 5 为 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签定义了一个新的扩展属性：async。它的作用和 defer 一样，能够异步地加载和执行脚本，不因为加载脚本而阻塞页面的加载。但是有一点需要注意，在有 async 的情况下，JavaScript 脚本一旦下载好了就会执行，所以很有可能不是按照原本的顺序来执行的。如果 JavaScript 脚本前后有依赖性，使用 async 就很有可能出现错误。&lt;/p&gt;

&lt;p&gt;IE8,9不支持 &lt;code class=&quot;highlighter-rouge&quot;&gt;async&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;动态脚本元素&lt;/li&gt;
  &lt;li&gt;使用 XMLHttpRequest(XHR)对象&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;原文中的总结&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;减少 JavaScript 对性能的影响有以下几种方法：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;将所有的 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签放到页面底部，也就是 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; 闭合标签之前，这能确保在脚本执行前页面已经完成了渲染。&lt;/li&gt;
  &lt;li&gt;尽可能地合并脚本。页面中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签越少，加载也就越快，响应也越迅速。无论是外链脚本还是内嵌脚本都是如此。&lt;/li&gt;
  &lt;li&gt;采用无阻塞下载 JavaScript 脚本的方法：
    &lt;ul&gt;
      &lt;li&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签的 defer 属性（仅适用于 IE 和 Firefox 3.5 以上版本）；&lt;/li&gt;
      &lt;li&gt;使用动态创建的 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 元素来下载并执行代码；&lt;/li&gt;
      &lt;li&gt;使用 XHR 对象下载 JavaScript 代码并注入页面中。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;通过以上策略，可以在很大程度上提高那些需要使用大量 JavaScript 的 Web 网站和应用的实际性能。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;javascript数据类型及语言基础&quot;&gt;JavaScript数据类型及语言基础&lt;/h2&gt;

&lt;h3 id=&quot;数据类型概要&quot;&gt;数据类型概要&lt;/h3&gt;

&lt;p&gt;最新的 ECMAScript 标准定义了 7 种数据类型:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;6 种 原始类型:
    &lt;ul&gt;
      &lt;li&gt;Boolean&lt;/li&gt;
      &lt;li&gt;Null&lt;/li&gt;
      &lt;li&gt;Undefined&lt;/li&gt;
      &lt;li&gt;Number&lt;/li&gt;
      &lt;li&gt;String&lt;/li&gt;
      &lt;li&gt;Symbol (new in ECMAScript 6)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;和 Object&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;一些要点&quot;&gt;一些要点&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;一个没有被赋值的变量会有个默认值 undefined&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;null 与 undefined 的不同点：&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  typeof null        // object (bug in ECMAScript, should be null)
  typeof undefined   // undefined
  null === undefined // false
  null == undefined // true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;typeof null 返回 object&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Number 数字类型，它并没有为整数给出一种特定的类型。除了能够表示浮点数外，还有一些带符号的值：+Infinity，-Infinity 和 NaN (非数值，Not-a-Number)。&lt;/li&gt;
  &lt;li&gt;NaN与任何值都不相等，包括自身。应当使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;x != x&lt;/code&gt; 来判断，当且仅当 x 为 NaN 的时候，表达式的结果才为 &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;。相似的函数有 &lt;code class=&quot;highlighter-rouge&quot;&gt;isNaN()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;isFinite()&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;数组直接量的语法允许有可选的结尾逗号，故 &lt;code class=&quot;highlighter-rouge&quot;&gt;[,,]&lt;/code&gt; 只有两个元素而非三个。&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;实践判断各种数据类型的方法&quot;&gt;实践判断各种数据类型的方法&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 判断arr是否为一个数组，返回一个bool值
function isArray(arr) {
    return typeof arr === &quot;object&quot; &amp;amp;&amp;amp; Object.prototype.toString.call(arr) === &quot;[object Array]&quot;;
}

// 判断fn是否为一个函数，返回一个bool值
function isFunction(fn) {
    return typeof fn === &quot;function&quot;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;数组类型&quot;&gt;数组类型&lt;/h4&gt;

&lt;p&gt;在 ECMAScript5 中，可以直接使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;Array.isArray()&lt;/code&gt; 来判断数组。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Array.isArray([]);  //true
Array.isArray({});  //false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我看《JavaScript权威指南上》没有推荐使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;instanceof&lt;/code&gt;，因为可能会有多窗体(frame)存在。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;这样每一个窗口都有一个自己的 JavaScript 环境，有自己的全局对象。并且每个全局对象都有自己的一组构造函数。因此一个窗体中的对象不可能是另外窗体中的构造函数的实例。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;所以采用了上述我写的那样的代码&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;值类型和引用类型的区别&quot;&gt;值类型和引用类型的区别&lt;/h3&gt;

&lt;p&gt;声明一个值类型变量，编译器会在栈上分配一个空间，这个空间对应着该值类型变量，空间里存储的就是该变量的值。引用类型的实例分配在堆上，新建一个引用类型实例，得到的变量值对应的是该实例的内存分配地址，这就像您的银行账号一样。&lt;/p&gt;

&lt;p&gt;JavaScript中原始值包括：undefined，null，布尔值，数字和字符串。引用类型主要指对象（包括数组和函数）。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;原始值是不可更改的。对象的值是可修改的。&lt;/li&gt;
    &lt;li&gt;原始值的比较是值的比较。对象的比较并非值的比较。对象的值都是引用，对象的比较均是引用的比较，当且仅当他们都引用同一个基对象时，他们才相等。&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;对象的读取遍历方式&quot;&gt;对象的读取、遍历方式&lt;/h3&gt;

&lt;p&gt;参考：&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Working_with_Objects&quot;&gt;JavaScript 指南-使用对象&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;对象&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在javascript中，一个对象可以是一个单独的拥有属性和类型的实体。我们拿它和一个杯子做下类比。一个杯子是一个对象(物体)，拥有属性。杯子有颜色，图案，重量，由什么材质构成等等。同样，javascript对象也有属性来定义它的特征。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;属性&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一个 javascript 对象有很多属性。一个对象的属性可以被解释成一个附加到对象上的变量。对象的属性和普通的 javascript 变量基本没什么区别，仅仅是属性属于某个对象。属性定义了对象的特征(译注：动态语言面向对象的鸭子类型)。你可以通过点符号来访问一个对象的属性。JavaScript 对象的属性也可以通过方括号访问。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;枚举&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;你可以在 &lt;code class=&quot;highlighter-rouge&quot;&gt;for...in&lt;/code&gt; 语句中使用方括号标记以枚举一个对象的所有属性。为了展示它如何工作，下面的函数当你将对象及其名称作为参数传入时，显示对象的属性：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function showProps(obj, objName) {
  var result = &quot;&quot;;
  for (var i in obj) {
    if (obj.hasOwnProperty(i)) {
        result += objName + &quot;.&quot; + i + &quot; = &quot; + obj[i] + &quot;\n&quot;;
    }
  }
  return result;
}

var srcObj = {
    a: 1,
    b: {
        b1: [&quot;hello&quot;, &quot;hi&quot;],
        b2: &quot;JavaScript&quot;
    }
};

console.log(showProps(srcObj,&#39;srcObj&#39;));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;console:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;srcObj.a = 2
srcObj.b = [object Object]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;hasOwnProperty()&lt;/code&gt; 是为了确保是自己的属性而非继承的属性。&lt;/p&gt;

&lt;p&gt;可以如下写，跳过这个对象的方法：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function showPropsWithoutFun(obj, objName) {
    var result = &quot;&quot;;
    for (var i in obj) {
        if (!obj.hasOwnProperty(i)) {       //跳过继承属性
            continue;
        }
        if (typeof obj[i] === &quot;function&quot;) { //跳过这个对象的方法
            continue;
        }
        result += objName + &quot;.&quot; + i + &quot;=&quot; + obj[i] + &quot;\n&quot;;
    }
    return result;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;相关的方法还有：&lt;code class=&quot;highlighter-rouge&quot;&gt;Object.keys()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.getOwnPropertyNames()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Object.keys()&lt;/code&gt; 方法会返回一个由给定对象的所有可枚举自身属性的属性名组成的数组，数组中属性名的排列顺序和使用for-in循环遍历该对象时返回的顺序一致（两者的主要区别是 for-in 还会遍历出一个对象从其原型链上继承到的可枚举属性）。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Object.getOwnPropertyNames()&lt;/code&gt; 方法返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性）组成的数组。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;创建对象&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;创建对象的方式有三种：使用对象初始化器，使用构造函数，使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.create()&lt;/code&gt; 方法。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Object.create()&lt;/code&gt; 方法创建一个拥有指定原型和若干个指定属性的对象。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;继承&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所有的 JavaScript 对象继承于至少一个对象。被继承的对象被称作原型，并且继承的属性可能通过构造函数的 prototype 对象找到。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;定义方法&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一个方法 是关联到某个对象的函数，或者简单地说，一个方法是一个值为某个函数的对象属性。定义方法就象定义普通的函数，除了它们必须被赋给对象的某个属性。例如：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;objectName.methodname = function_name;

var myObj = {
  myMethod: function(params) {
    // ...do something
  }
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;深度克隆&quot;&gt;深度克隆&lt;/h4&gt;

&lt;p&gt;了解值类型和引用类型的区别，了解各种对象的读取、遍历方式，并在util.js中实现以下方法：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 使用递归来实现一个深度克隆，可以复制一个目标对象，返回一个完整拷贝
// 被复制的对象类型会被限制为数字、字符串、布尔、日期、数组、Object对象。不会包含函数、正则对象等
function cloneObject(src) {
    // your implement
}

// 测试用例：
var srcObj = {
    a: 1,
    b: {
        b1: [&quot;hello&quot;, &quot;hi&quot;],
        b2: &quot;JavaScript&quot;
    }
};
var abObj = srcObj;
var tarObj = cloneObject(srcObj);

srcObj.a = 2;
srcObj.b.b1[0] = &quot;Hello&quot;;

console.log(abObj.a);
console.log(abObj.b.b1[0]);

console.log(tarObj.a);      // 1
console.log(tarObj.b.b1[0]);    // &quot;hello&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;参考：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/java2000_net/article/details/3014934&quot;&gt;白话简单克隆和深度克隆&lt;/a&gt; 介绍什么是深度克隆，用羊圈和羊的图，简单深刻。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.jb51.net/article/32015.htm&quot;&gt;javascript克隆对象深度介绍&lt;/a&gt; 这个代码写的太妙了，可惜找不到源地址了，都是转载来转载去的，要是你知道源地址，请留言告诉我。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;浅度克隆：基本类型为值传递，对象仍为引用传递。&lt;/p&gt;

&lt;p&gt;深度克隆：所有元素或属性均完全克隆，并于原引用类型完全独立，即，在后面修改对象的属性的时候，原对象不会被修改。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;思路：&lt;/strong&gt;深度克隆复制目标对象，那么就需要枚举这个对象。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;判断当前属性是否是引用类型，如果是数组或者对象，创建响应类型变量。&lt;/li&gt;
  &lt;li&gt;枚举对象内所有属性。&lt;/li&gt;
  &lt;li&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;hasOwnProperty()&lt;/code&gt; 方法，排除继承的属性。&lt;/li&gt;
  &lt;li&gt;给新的对象相应位置赋值，若当前属性为引用类型（数组或对象）递归本方法。直到内部的值类型。&lt;/li&gt;
  &lt;li&gt;返回新的对象。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;我的代码实现：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function cloneObject(src) {
    // your implement
    var o; //result
    if (Object.prototype.toString.call(src) === &quot;[object Array]&quot;) {
        o = []; //判断是否是数组，并赋初始值
    } else {
        o = {};
    }
    for (var i in src) { //遍历这个对象
        if (src.hasOwnProperty(i)) { //排出继承属性
            if (typeof src[i] === &quot;object&quot;) {
                o[i] = cloneObject(src[i]); //递归赋值
            } else {
                o[i] = src[i]; //直接赋值
            }
        }
    }
    return o;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;对数组进行去重&quot;&gt;对数组进行去重&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;参考：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array&quot;&gt;MDN Array&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.w3school.com.cn/jsref/jsref_obj_array.asp&quot;&gt;JavaScript Array 对象 w3school&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;要求：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 对数组进行去重操作，只考虑数组中元素为数字或字符串，返回一个去重后的数组
function uniqArray(arr) {
    // your implement
}

// 使用示例
var a = [1, 3, 5, 7, 5, 3];
var b = uniqArray(a);
console.log(b); // [1, 3, 5, 7]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;思路：&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;新建一个空数组&lt;/li&gt;
  &lt;li&gt;遍历原数组&lt;/li&gt;
  &lt;li&gt;若新数组中不存在当前元素，将其 &lt;code class=&quot;highlighter-rouge&quot;&gt;push&lt;/code&gt; 入新数组中&lt;/li&gt;
  &lt;li&gt;返回新数组&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;实现：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 对数组进行去重操作，只考虑数组中元素为数字或字符串，返回一个去重后的数组
function uniqArray(arr) {
    var newArr = [];    //创建空数组
    for (var i in arr) {    //遍历旧数组
        if (newArr.indexOf(arr[i]) == -1) {//如果新数组中不存在当前元素
            newArr.push(arr[i]);//新数组中加入当前元素
        }
    }
    return newArr;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;相关方法与知识点：&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;array-对象&quot;&gt;Array 对象&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Array 对象属性&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;属性&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;constructor&lt;/td&gt;
      &lt;td&gt;返回对创建此对象的数组函数的引用。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;length&lt;/td&gt;
      &lt;td&gt;设置或返回数组中元素的数目。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;prototype&lt;/td&gt;
      &lt;td&gt;使您有能力向对象添加属性和方法。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;Mutator 方法，这些方法可以改变数组自身&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;方法&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;pop&lt;/td&gt;
      &lt;td&gt;移除数组的最后一个元素，返回值是被删除的元素。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;push&lt;/td&gt;
      &lt;td&gt;在数组的末尾添加一个或者多个元素，返回值是新的数组的长度。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;reverse&lt;/td&gt;
      &lt;td&gt;颠倒数组中元素的顺序，原先第一个元素现在变成最后一个，同样原先的最后一个元素变成了现在的第一个，也就是数组的索引发生了变化。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;shift&lt;/td&gt;
      &lt;td&gt;删除数组的第一个元素，返回值是删除的元素。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;sort&lt;/td&gt;
      &lt;td&gt;对数组中的元素进行排序。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;splice&lt;/td&gt;
      &lt;td&gt;添加或删除数组中的一个或多个元素。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;unshift&lt;/td&gt;
      &lt;td&gt;添加一个或者多个元素在数组的开头，返回值是新的数组的长度。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;Accessor 方法，这些过程不改变数组自身 These methods do not modify the array and return some representation of the array.&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;方法&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;concat&lt;/td&gt;
      &lt;td&gt;返回一个包含此数组和其他数组和/或值的结合的新数组&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;indexOf&lt;/td&gt;
      &lt;td&gt;返回第一个与给定参数相等的数组元素的索引，没有找到则返回-1。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;join&lt;/td&gt;
      &lt;td&gt;将所有的数组元素连接成一个字符串。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;lastIndexOf&lt;/td&gt;
      &lt;td&gt;返回在数组中搜索到的与给定参数相等的元素的最后（最大）索引。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;slice&lt;/td&gt;
      &lt;td&gt;返回数组中的一段。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;toSource&lt;/td&gt;
      &lt;td&gt;Returns an array literal representing the specified array; you can use this value to create a new array. Overrides the Object.toSource method.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;toString&lt;/td&gt;
      &lt;td&gt;返回代表该数组及其元素的字符,重写Object.toString 过程.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;valueOf&lt;/td&gt;
      &lt;td&gt;Returns the primitive value of the array. Overrides the Object.valueOf method.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;循环（迭代）过程&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;方法&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;filter&lt;/td&gt;
      &lt;td&gt;对数组中的每一个元素调用参数中指定的过滤函数，并将对于过滤函数返回值为true的那些数组元素集合为新的数组返回。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;forEach&lt;/td&gt;
      &lt;td&gt;对数组的每一个元素依次调用参数中指定的函数。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;every&lt;/td&gt;
      &lt;td&gt;如果数组中每一个元素都满足参数中提供的测试函数，则返回真。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;map&lt;/td&gt;
      &lt;td&gt;Creates a new array with the results of calling a provided function on every element in this array.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;some&lt;/td&gt;
      &lt;td&gt;如果数组中至少有一个元素满足参数函数的测试，则返回true。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;实现-trim&quot;&gt;实现 &lt;code class=&quot;highlighter-rouge&quot;&gt;trim()&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;参考：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;String MDN&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.w3school.com.cn/jsref/jsref_obj_string.asp&quot;&gt;JavaScript String 对象 W3school&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;要求：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 中级班同学跳过此题
// 实现一个简单的trim函数，用于去除一个字符串，头部和尾部的空白字符
// 假定空白字符只有半角空格、Tab
// 练习通过循环，以及字符串的一些基本方法，分别扫描字符串str头部和尾部是否有连续的空白字符，并且删掉他们，最后返回一个完成去除的字符串
function simpleTrim(str) {
    // your implement
}

// 很多同学肯定对于上面的代码看不下去，接下来，我们真正实现一个trim
// 对字符串头尾进行空格字符的去除、包括全角半角空格、Tab等，返回一个字符串
// 尝试使用一行简洁的正则表达式完成该题目
function trim(str) {
    // your implement
}

// 使用示例
var str = &#39;   hi!  &#39;;
str = trim(str);
console.log(str); // &#39;hi!&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;思路：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;对于 &lt;code class=&quot;highlighter-rouge&quot;&gt;simpleTrim()&lt;/code&gt; 做两次循环，从前面开始和从后面开始。遇到空格和Tab跳出，最后用 &lt;code class=&quot;highlighter-rouge&quot;&gt;slice()&lt;/code&gt; 取出子字符串。&lt;/p&gt;

&lt;p&gt;对于 &lt;code class=&quot;highlighter-rouge&quot;&gt;trim()&lt;/code&gt; 使用正则表达式。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;实现：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function simpleTrim(str) {
    var i;
    var j;
    for (i = 0; i &amp;lt; str.length; i++) { //从头遍历字符串
        if (str.charAt(i) != &quot; &quot; &amp;amp;&amp;amp; str.charAt(i) != &quot;\t&quot;) { //当不为空的时候
            break; //跳出循环
        }
    }
    for (j = str.length - 1; j &amp;gt;= 0; j--) {
        if (str.charAt(j) != &quot; &quot; &amp;amp;&amp;amp; str.charAt(j) != &quot;\t&quot;) { //当不为空的时候
            break; //跳出循环
        }
    }
    return str.slice(i, j + 1); //返回子字符串
}

function trim(str) {
    return str.replace(/^\s+|\s+$/g, &#39;&#39;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;关于正则表达式：&lt;/p&gt;

&lt;h4 id=&quot;正则表达式&quot;&gt;正则表达式&lt;/h4&gt;

&lt;p&gt;上面的思路是匹配开头和结尾的空白字符，并全局匹配。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;^&lt;/code&gt;：匹配字符串的开头，在多行检索中，匹配一行的开头。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt;：匹配字符串的结尾，在多行检索中，匹配一行的结尾。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt;：选择，匹配的是该符号左边的子表达式或右边的子表达式。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\s&lt;/code&gt;：任何 Unicode 空白符。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;g&lt;/code&gt;：执行一个全局匹配，简言之，即找到所有匹配，而不是找到第一个之后就停止。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上来自 JavaScript权威指南（犀牛书），感觉这里面将的正则表达式还不错。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;相关方法和知识点：&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;string对象&quot;&gt;String对象&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;String 对象属性&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;属性&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;constructor&lt;/td&gt;
      &lt;td&gt;对创建该对象的函数的引用&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;length&lt;/td&gt;
      &lt;td&gt;字符串的长度&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;prototype&lt;/td&gt;
      &lt;td&gt;允许您向对象添加属性和方法&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;String 对象方法&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;方法&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;charAt()&lt;/td&gt;
      &lt;td&gt;返回在指定位置的字符。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;charCodeAt()&lt;/td&gt;
      &lt;td&gt;返回在指定的位置的字符的 Unicode 编码。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;concat()&lt;/td&gt;
      &lt;td&gt;连接字符串。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;indexOf()&lt;/td&gt;
      &lt;td&gt;检索字符串。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;lastIndexOf()&lt;/td&gt;
      &lt;td&gt;从后向前搜索字符串。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;localeCompare()&lt;/td&gt;
      &lt;td&gt;用本地特定的顺序来比较两个字符串。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;match()&lt;/td&gt;
      &lt;td&gt;找到一个或多个正则表达式的匹配。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;replace()&lt;/td&gt;
      &lt;td&gt;替换与正则表达式匹配的子串。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;search()&lt;/td&gt;
      &lt;td&gt;检索与正则表达式相匹配的值。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;slice()&lt;/td&gt;
      &lt;td&gt;提取字符串的片断，并在新的字符串中返回被提取的部分。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;split()&lt;/td&gt;
      &lt;td&gt;把字符串分割为字符串数组。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;substr()&lt;/td&gt;
      &lt;td&gt;从起始索引号提取字符串中指定数目的字符。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;substring()&lt;/td&gt;
      &lt;td&gt;提取字符串中两个指定的索引号之间的字符。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;toLowerCase()&lt;/td&gt;
      &lt;td&gt;把字符串转换为小写。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;toUpperCase()&lt;/td&gt;
      &lt;td&gt;把字符串转换为大写。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;toString()&lt;/td&gt;
      &lt;td&gt;返回字符串。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;valueOf()&lt;/td&gt;
      &lt;td&gt;返回某个字符串对象的原始值。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;静态方法&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;String.fromCharCode()&lt;/code&gt; 使用作为参数传入的字符编码创建一个新的字符串。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HTML方法&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;由于不是标准方法，这里就不列举了。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;遍历数组使每一个元素执行-fn-函数&quot;&gt;遍历数组，使每一个元素执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;fn&lt;/code&gt; 函数&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;要求：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 实现一个遍历数组的方法，针对数组中每一个元素执行fn函数，并将数组索引和元素作为参数传递
function each(arr, fn) {
    // your implement
}

// 其中fn函数可以接受两个参数：item和index

// 使用示例
var arr = [&#39;java&#39;, &#39;c&#39;, &#39;php&#39;, &#39;html&#39;];
function output(item) {
    console.log(item)
}
each(arr, output);  // java, c, php, html

// 使用示例
var arr = [&#39;java&#39;, &#39;c&#39;, &#39;php&#39;, &#39;html&#39;];
function output(item, index) {
    console.log(index + &#39;: &#39; + item)
}
each(arr, output);  // 0:java, 1:c, 2:php, 3:html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;分析：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这个任务有点像 &lt;code class=&quot;highlighter-rouge&quot;&gt;ECMAScript5&lt;/code&gt; 中新增的数组方法：&lt;code class=&quot;highlighter-rouge&quot;&gt;forEach()&lt;/code&gt;。还有一点这里的参数 index 是可选形参，保证第一个参数 item 能正常传入就行了，代码非常简单，如下：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;实现：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function each(arr, fn) {
    for(var i in arr){
        fn(arr[i],i);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;获取对象中第一层元素个数&quot;&gt;获取对象中第一层元素个数&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;要求：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 获取一个对象里面第一层元素的数量，返回一个整数
function getObjectLength(obj) {}

// 使用示例
var obj = {
    a: 1,
    b: 2,
    c: {
        c1: 3,
        c2: 4
    }
};
console.log(getObjectLength(obj)); // 3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;实现：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function getObjectLength(obj) {
    return Object.keys(obj).length;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个自己写的比较简单，不知道可以这样写不。其中 &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.keys(o)&lt;/code&gt; 为 Object 的一个静态方法，参数是一个对象，返回一个包含o的所有可枚举自有（非继承）属性名字的数组。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;正则表达式-1&quot;&gt;正则表达式&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;要求：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 判断是否为邮箱地址
function isEmail(emailStr) {
    // your implement
}

// 判断是否为手机号
function isMobilePhone(phone) {
    // your implement
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;分析：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;邮箱由（数字字母，点），数字字母组合，@符号，数字字母，（点，数字字母）。其中两个小括号都是任意个数的。并且开头和结尾都是字母。&lt;/p&gt;

&lt;p&gt;手机号是11位组成的，有时候会在前面加国际区号的前缀，如中国：+86。查阅相关资料后发现区号最多4位。&lt;a href=&quot;http://baike.baidu.com/link?url=2nwM_XyoKXLNPxk0-uDwGT4SxIFncXy7dqB3VbsH3tSaueYRri3CYOWWF9qb84zUqeKkq9uTF2YfetoiyJVm7_&quot;&gt;国际电话区号_百度百科&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;并且手机号最多就是11位，其他国家有用8位的，也有用7位，10位的都有。最短是7位，最长是11位。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;实现：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 判断是否为邮箱地址
function isEmail(emailStr) {
    var pattern = /^(\w+\.)*\w+@\w+(\.\w+)+$/;
    return pattern.test(emailStr);
}

// 判断是否为手机号
function isMobilePhone(phone) {
    var pattern = /^(\+\d{1,4})?\d{7,11}$/;
    return pattern.test(phone);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;相关方法和知识点：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;参考：&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp#Special_characters_in_regular_expressions&quot;&gt;RegExp MDN&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;正则表达式修饰符：&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;字符&lt;/th&gt;
      &lt;th&gt;含义&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;g&lt;/td&gt;
      &lt;td&gt;全局匹配&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;i&lt;/td&gt;
      &lt;td&gt;忽略大小写&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;m&lt;/td&gt;
      &lt;td&gt;让开始和结束字符（^ 和 $）工作在多行模式（也就是，^ 和 $ 可以匹配字符串中每一行的开始和结束（行是由 \n 或 \r 分割的），而不只是整个输入字符串的最开始和最末尾处。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;字符类别&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;字符&lt;/th&gt;
      &lt;th&gt;含义&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;[…]&lt;/td&gt;
      &lt;td&gt;方括号内的任意字符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[^…]&lt;/td&gt;
      &lt;td&gt;不在方括号内的任意字符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;.&lt;/td&gt;
      &lt;td&gt;（点号，小数点）匹配任意单个字符，但是换行符除外，包括：\n \r \u2028 或 \u2029。&lt;br /&gt;&lt;br /&gt;需要注意的是，m 多行（multiline）标志不会改变点号的表现。因此为了匹配多行中的字符集，可使用[^] （当然你不是打算用在旧版本 IE 中），它将会匹配任意字符，包括换行符&lt;br /&gt;&lt;br /&gt;例如，/.y/ 匹配 “yes make my day” 中的 “my” 和 “ay”，但是不匹配 “yes”。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\d&lt;/td&gt;
      &lt;td&gt;匹配基本拉丁字母表（basic Latin alphabet）中的一个数字字符。等价于[0-9]。&lt;br /&gt;&lt;br /&gt;例如，/\d/ 或 /[0-9]/ 匹配 “B2 is the suite number.” 中的 ‘2’。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\D&lt;/td&gt;
      &lt;td&gt;匹配任意一个不是基本拉丁字母表中数字的字符。等价于[^0-9]。&lt;br /&gt;&lt;br /&gt;例如，/\D/ 或 /[^0-9]/ 匹配 “B2 is the suite number.” 中的 ‘B’。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\w&lt;/td&gt;
      &lt;td&gt;匹配任意来自基本拉丁字母表中的字母数字字符，还包括下划线。等价于 [A-Za-z0-9_]。&lt;br /&gt;&lt;br /&gt;例如，/\w/ 匹配 “apple” 中的 ‘a’，”$5.28” 中的 ‘5’ 和 “3D” 中的 ‘3’。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\W&lt;/td&gt;
      &lt;td&gt;匹配任意不是基本拉丁字母表中单词（字母数字下划线）字符的字符。等价于 [^A-Za-z0-9_]。&lt;br /&gt;&lt;br /&gt;例如，/\W/ 或 /[^A-Za-z0-9_]/ 匹配 “50%” 中的 ‘%’。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\s&lt;/td&gt;
      &lt;td&gt;匹配一个空白符，包括空格、制表符、换页符、换行符和其他 Unicode 空格。&lt;br /&gt;&lt;br /&gt;等价于 [ \f\n\r\t\v​\u00a0\u1680​\u180e\u2000​\u2001\u2002​\u2003\u2004​ \u2005\u2006​\u2007\u2008​\u2009\u200a​\u2028\u2029​​\u202f\u205f​ \u3000]。&lt;br /&gt;&lt;br /&gt;例如 /\s\w*/ 匹配 “foo bar” 中的 ‘ bar’。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\S&lt;/td&gt;
      &lt;td&gt;匹配一个非空白符。等价于 [^ \f\n\r\t\v​\u00a0\u1680​\u180e\u2000​\u2001\u2002​\u2003\u2004​ \u2005\u2006​\u2007\u2008​\u2009\u200a​\u2028\u2029​\u202f\u205f​\u3000]。&lt;br /&gt;&lt;br /&gt;例如，/\S\w*/ 匹配 “foo bar” 中的 ‘foo’。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[\b]&lt;/td&gt;
      &lt;td&gt;匹配一个退格符（backspace）（不要与 \b 混淆）&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;直接量字符&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;字符&lt;/th&gt;
      &lt;th&gt;匹配&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;数字和字母字符&lt;/td&gt;
      &lt;td&gt;自身&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\t&lt;/td&gt;
      &lt;td&gt;匹配一个水平制表符（tab）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\r&lt;/td&gt;
      &lt;td&gt;匹配一个回车符（carriage return）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\n&lt;/td&gt;
      &lt;td&gt;匹配一个换行符（linefeed）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\v&lt;/td&gt;
      &lt;td&gt;匹配一个垂直制表符（vertical tab）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\f&lt;/td&gt;
      &lt;td&gt;匹配一个换页符（form-feed）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\0&lt;/td&gt;
      &lt;td&gt;匹配一个 NUL 字符。不要在此后面跟小数点。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\cX&lt;/td&gt;
      &lt;td&gt;X 是 A - Z 的一个字母。匹配字符串中的一个控制字符。&lt;br /&gt;&lt;br /&gt;例如，/\cM/ 匹配字符串中的 control-M。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\xhh&lt;/td&gt;
      &lt;td&gt;匹配编码为 hh （两个十六进制数字）的字符。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\uhhhh&lt;/td&gt;
      &lt;td&gt;匹配 Unicode 值为 hhhh （四个十六进制数字）的字符。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;边界&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;字符&lt;/th&gt;
      &lt;th&gt;含义&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;^&lt;/td&gt;
      &lt;td&gt;匹配输入/字符串的开始。如果多行（multiline）标志被设为 true，该字符也会匹配一个断行（line break）符后的开始处。&lt;br /&gt;&lt;br /&gt;例如，/^A/ 不匹配 “an A” 中的 “A”，但匹配 “An A” 中的 “A”。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$&lt;/td&gt;
      &lt;td&gt;匹配输入/字符串的结尾。如果多行（multiline）标志被设为 true，该字符也会匹配一个断行（line break）符的前的结尾处。&lt;br /&gt;&lt;br /&gt;例如，/t$/ 不匹配 “eater” 中的 “t”，但匹配 “eat” 中的 “t”。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\b&lt;/td&gt;
      &lt;td&gt;匹配一个零宽单词边界（zero-width word boundary），如一个字母与一个空格之间。 （不要和 [\b] 混淆）&lt;br /&gt;&lt;br /&gt;例如，/\bno/ 匹配 “at noon” 中的 “no”，/ly\b/ 匹配 “possibly yesterday.” 中的 “ly”。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\B&lt;/td&gt;
      &lt;td&gt;匹配一个零宽非单词边界（zero-width non-word boundary），如两个字母之间或两个空格之间。&lt;br /&gt;&lt;br /&gt;例如，/\Bon/ 匹配 “at noon” 中的 “on”，/ye\B/ 匹配 “possibly yesterday.” 中的 “ye”。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;dom&quot;&gt;DOM&lt;/h2&gt;

&lt;p&gt;参考：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.w3school.com.cn/htmldom/index.asp&quot;&gt;HTML DOM 教程 W3C&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.w3school.com.cn/js/js_htmldom.asp&quot;&gt;JavaScript HTML DOM W3C&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.w3school.com.cn/jsref/dom_obj_document.asp&quot;&gt;参考手册-HTML DOM Document 对象&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.w3school.com.cn/jsref/dom_obj_all.asp&quot;&gt;参考手册-HTML DOM Element 对象&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;基本任务&quot;&gt;基本任务&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;任务：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;先来一些简单的，在你的util.js中完成以下任务：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 为element增加一个样式名为newClassName的新样式
function addClass(element, newClassName) {
    // your implement
}

// 移除element中的样式oldClassName
function removeClass(element, oldClassName) {
    // your implement
}

// 判断siblingNode和element是否为同一个父元素下的同一级的元素，返回bool值
function isSiblingNode(element, siblingNode) {
    // your implement
}

// 获取element相对于浏览器窗口的位置，返回一个对象{x, y}
function getPosition(element) {
    // your implement
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;思路：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;addClass()&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;对于element本身如果没有样式类，那么使用Element的className属性获取的是空字符串，则直接添加新的样式类字符串即可。对于已经有了样式类的元素，获取到原有的样式类后，在后面添加一个空格，再添加新的样式类即可。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;removeClass()&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;获取原始的样式，然后用正则表达式去匹配这个要删掉的样式，由于是动态的正则表达式，所以要用正则的构造函数 &lt;code class=&quot;highlighter-rouge&quot;&gt;RegExp()&lt;/code&gt; 来创建，并且使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;\b&lt;/code&gt; 来确定单词边界。匹配好后用空字符串替换被匹配的样式类即可。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;isSiblingNode()&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;直接判断两个父节点是不是相同&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;getPosition()&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;下面这些内容是我之前的思路，现在觉得太复杂，可以用另一种解决方法。&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;offsetTop&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;offsetLeft&lt;/code&gt; 都是相对于最近一个有定位的父元素，如果都没有那么就是相对于 body 的偏移位置。&lt;/p&gt;

      &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;offsetParent&lt;/code&gt; 是寻找最近一个有定位的父级元素，如果没有，那么找到 body 元素。&lt;/p&gt;

      &lt;p&gt;所以这道题需要先寻找有定位的父级元素，如果都没有，那么就是相对于 body 的偏移了，可以直接使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;offsetTop&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;offsetLeft&lt;/code&gt;。&lt;/p&gt;

      &lt;p&gt;如果有定位的父级元素不是 body，是 A 元素，那么再寻找 A 元素的最近的有定位的父级元素，如果没有，就是相对于 body 的定位，这时，所求偏移量就是 A 的偏移量加所求元素相对于 A 的偏移量。如果 A 还有已经定位的父级元素，就继续去推，直到找到 body 为止。&lt;/p&gt;

      &lt;p&gt;这里可能要用到一个递归算法。&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;&lt;strong&gt;另一种方法：&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;getBoundingClientRect()&lt;/code&gt; 方法获取当前元素相对于可视区域的位置，再加上滚动条的位置。&lt;/p&gt;

    &lt;p&gt;关于滚动条的位置 &lt;code class=&quot;highlighter-rouge&quot;&gt;scrollTop&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;scrollLeft&lt;/code&gt; 这两个属性的使用，各个浏览器还都不一样。&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;详情见 &lt;a href=&quot;http://www.cnblogs.com/zhenyu-whu/archive/2012/11/13/2768004.html&quot;&gt;document.body.scrollTop or document.documentElement.scrollTop&lt;/a&gt;。&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;简单的说就是：FF、Opera 和 IE 浏览器认为在客户端浏览器展示的页面的内容对应于整个 HTML，所以使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;document.documentElement&lt;/code&gt;来代表，相应的滚动距离则通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;document.documentElement.scrollLeft&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;document.documentElement.scrollTop&lt;/code&gt; 来获取，而 Safari 和 Chrome 浏览器则认为页面开始于 body 部分，从而相应的滚动距离用 &lt;code class=&quot;highlighter-rouge&quot;&gt;document.body.scrollLeft&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;document.body.scrollTop&lt;/code&gt; 来获取。另外需要注意的是，FF 和 IE 的 quirks mode（兼容模式）下是用 &lt;code class=&quot;highlighter-rouge&quot;&gt;document.body&lt;/code&gt; 来获取的。&lt;/p&gt;

    &lt;p&gt;documentElement 对应的是 html 标签，而 body 对应的是 body 标签&lt;/p&gt;

    &lt;p&gt;针对跨浏览器的解决方案则可简单的用如下代码获取：&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  var scrollLeft = Math.max(document.documentElement.scrollLeft, document.body.scrollLeft); 
  var scrollTop = Math.max(document.documentElement.scrollTop, document.body.scrollTop); 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;实现：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 为element增加一个样式名为newClassName的新样式
function addClass(element, newClassName) {
    var oldClassName = element.className; //获取旧的样式类
    element.className = oldClassName === &quot;&quot; ? newClassName : oldClassName + &quot; &quot; + newClassName;
}

// 移除element中的样式oldClassName
function removeClass(element, oldClassName) {
    var originClassName = element.className; //获取原先的样式类
    var pattern = new RegExp(&quot;\\b&quot; + oldClassName + &quot;\\b&quot;); //使用构造函数构造动态的正则表达式
    element.className = originClassName.replace(pattern, &#39;&#39;);
}

function isSiblingNode(element, siblingNode) {
    return element.parentNode === siblingNode.parentNode;
}

function getPosition(element) {
    var pos={};
    pos.x = element.getBoundingClientRect().left + Math.max(document.documentElement.scrollLeft, document.body.scrollLeft); 
    pos.y = element.getBoundingClientRect().top + Math.max(document.documentElement.scrollTop, document.body.scrollTop);
    return pos;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;mini-&quot;&gt;mini $&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;任务：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;接下来挑战一个mini $，它和之前的$是不兼容的，它应该是document.querySelector的功能子集，在不直接使用document.querySelector的情况下，在你的util.js中完成以下任务：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 实现一个简单的Query
function $(selector) {

}

// 可以通过id获取DOM对象，通过#标示，例如
$(&quot;#adom&quot;); // 返回id为adom的DOM对象

// 可以通过tagName获取DOM对象，例如
$(&quot;a&quot;); // 返回第一个&amp;lt;a&amp;gt;对象

// 可以通过样式名称获取DOM对象，例如
$(&quot;.classa&quot;); // 返回第一个样式定义包含classa的对象

// 可以通过attribute匹配获取DOM对象，例如
$(&quot;[data-log]&quot;); // 返回第一个包含属性data-log的对象

$(&quot;[data-time=2015]&quot;); // 返回第一个包含属性data-time且值为2015的对象

// 可以通过简单的组合提高查询便利性，例如
$(&quot;#adom .classa&quot;); // 返回id为adom的DOM所包含的所有子节点中，第一个样式定义包含classa的对象
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;参考：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.imooc.com/code/4477&quot;&gt;Sizzle选择器&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/xesam/archive/2012/02/15/2352466.html&quot;&gt;Sizzle引擎–原理与实践（一）&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/rubylouvre/archive/2011/01/24/1942818.html&quot;&gt;Sizzle是怎样工作的&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;思路：&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;通过空格拆分参数 selector，因为可能是组合查询。拆分为数组 selectorArr&lt;/li&gt;
  &lt;li&gt;遍历 selectorArr，条件判断各种情况。&lt;/li&gt;
  &lt;li&gt;得到节点的 Element 对象后，以这个对象为父节点，继续下一层的判断。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;实现：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//多个选择器有点难到我了，看了一些资料觉得思路应该如下：
//1.如果存在#，直接从#开始向后查
//2.如果存在tag直接找到所有的tag然后向后查
//3.样式类，属性，从后向前查，得到它所有的父节点名称，去筛选匹配
//以上的做法有点太复杂，我还是做一个简单的正向匹配吧。
function $(selector) {

    if (!selector) {
        return null;
    }

    if (selector == document) {
        return document;
    }

    selector = selector.trim();
    if (selector.indexOf(&quot; &quot;) !== -1) { //若存在空格
        var selectorArr = selector.split(/\s+/); //拆成数组

        var rootScope = myQuery(selectorArr[0]); //第一次的查找范围
        var i = null;
        var j = null;
        var result = [];
        //循环选择器中的每一个元素
        for (i = 1; i &amp;lt; selectorArr.length; i++) {
            for (j = 0; j &amp;lt; rootScope.length; j++) {
                result.push(myQuery(selectorArr[i], rootScope[j]));
            }
            // rootScope = result;
            // 目前这个方法还有bug
        }
        return result[0][0];
    } else { //只有一个，直接查询
        return myQuery(selector, document)[0];
    }
}

/**
 * 针对一个内容查找结果 success
 * @param  {String} selector 选择器内容
 * @param  {Element} root    根节点元素
 * @return {NodeList数组}    节点列表，可能是多个节点也可能是一个
 */
function myQuery(selector, root) {
    var signal = selector[0]; //
    var allChildren = null;
    var content = selector.substr(1);
    var currAttr = null;
    var result = [];
    root = root || document; //若没有给root，赋值document
    switch (signal) {
        case &quot;#&quot;:
            result.push(document.getElementById(content));
            break;
        case &quot;.&quot;:
            allChildren = root.getElementsByTagName(&quot;*&quot;);
            // var pattern0 = new RegExp(&quot;\\b&quot; + content + &quot;\\b&quot;);
            for (i = 0; i &amp;lt; allChildren.length; i++) {
                currAttr = allChildren[i].getAttribute(&quot;class&quot;);
                if (currAttr !== null) {
                    var currAttrsArr = currAttr.split(/\s+/);
                    console.log(currAttr);
                    for (j = 0; j &amp;lt; currAttrsArr.length; j++) {
                        if (content === currAttrsArr[j]) {
                            result.push(allChildren[i]);
                            console.log(result);
                        }
                    }
                }
            }
            break;
        case &quot;[&quot;: //属性选择
            if (content.search(&quot;=&quot;) == -1) { //只有属性，没有值
                allChildren = root.getElementsByTagName(&quot;*&quot;);
                for (i = 0; i &amp;lt; allChildren.length; i++) {
                    if (allChildren[i].getAttribute(selector.slice(1, -1)) !== null) {
                        result.push(allChildren[i]);
                    }
                }
            } else { //既有属性，又有值
                allChildren = root.getElementsByTagName(&quot;*&quot;);
                var pattern = /\[(\w+)\s*\=\s*(\w+)\]/; //为了分离等号前后的内容
                var cut = selector.match(pattern); //分离后的结果，为数组
                var key = cut[1]; //键
                var value = cut[2]; //值
                for (i = 0; i &amp;lt; allChildren.length; i++) {
                    if (allChildren[i].getAttribute(key) == value) {
                        result.push(allChildren[i]);
                    }
                }
            }
            break;
        default: //tag
            result = root.getElementsByTagName(selector);
            break;
    }
    return result;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;事件&quot;&gt;事件&lt;/h2&gt;

&lt;h3 id=&quot;绑定注册事件与移除事件&quot;&gt;绑定注册事件与移除事件&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;任务与实现：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 给一个element绑定一个针对event事件的响应，响应函数为listener
function addEvent(element, event, listener) {
    if (element.addEventListener) {
        element.addEventListener(event,listener);
    } else if(element.attachEvent){
        element.attachEvent(&quot;on&quot;+event,listener);
    }
}

// 移除element对象对于event事件发生时执行listener的响应
function removeEvent(element, event, listener) {
    if (element.removeEventListenr) {
        element.removeEventListenr(event,listener);
    } else if(element.detachEvent){
        element.detachEvent(&quot;on&quot;+event,listener);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;相关说明：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;IE8+ 支持 &lt;code class=&quot;highlighter-rouge&quot;&gt;addEventListener()&lt;/code&gt;。IE8 以下的版本使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;attachEvent()&lt;/code&gt;。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;attachEvent()&lt;/code&gt; 不支持时间捕获。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;attachEvent()&lt;/code&gt; 第一个参数事件处理程序属性名使用前缀 on。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;attachEvent()&lt;/code&gt; 允许相同的事件处理程序函数注册多次。&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;click-与-enter-键事件绑定&quot;&gt;click 与 enter 键事件绑定&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;任务与实现：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 实现对click事件的绑定
function addClickEvent(element, listener) {
    addEvent(element, &quot;click&quot;, listener);
}

// 实现对于按Enter键时的事件绑定
function addEnterEvent(element, listener) {
    addEvent(element, &quot;keydown&quot;, function(event) {
        if (event.keyCode == 13) {
            listener();
        }
    });
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;相关说明：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这里我直接使用了上一个任务写好的 &lt;code class=&quot;highlighter-rouge&quot;&gt;addEvent()&lt;/code&gt; 函数。这样可以简化代码，并有良好的兼容性。&lt;/p&gt;

&lt;p&gt;enter 键的 keyCode 为 13。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;事件代理&quot;&gt;事件代理&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;参考：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/Aralic/p/4446030.html&quot;&gt;javascript事件代理（委托）&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/leo388/p/4461579.html&quot;&gt;JS - 事件代理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;任务与实现：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function delegateEvent(element,tag,eventName,listener){
    addEvent(element, eventName, function(event){
        var target = event.target || event.srcElement;
        if(target.tagName.toLowerCase() == tag.toLowerCase()) {
            listener.call(target, event);
        }
    });
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;bom&quot;&gt;BOM&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;任务与实现：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 判断是否为IE浏览器，返回-1或者版本号
function isIE() {
    var s = navigator.userAgent.toLowerCase();
    console.log(s);
    //ie10的信息：
    //mozilla/5.0 (compatible; msie 10.0; windows nt 6.2; trident/6.0)
    //ie11的信息：
    //mozilla/5.0 (windows nt 6.1; trident/7.0; slcc2; .net clr 2.0.50727; .net clr 3.5.30729; .net clr 3.0.30729; media center pc 6.0; .net4.0c; .net4.0e; infopath.2; rv:11.0) like gecko
    var ie = s.match(/rv:([\d.]+)/) || s.match(/msie ([\d.]+)/);
    if(ie) {
        return ie[1];
    } else {
        return -1;
    }
}

// 设置cookie
function setCookie(cookieName, cookieValue, expiredays) {
    var cookie = cookieName + &quot;=&quot; + encodeURIComponent(cookieValue);
    if (typeof expiredays === &quot;number&quot;) {
        cookie += &quot;;max-age=&quot; + (expiredays * 60 * 60 * 24);
    }
    document.cookie = cookie;
}

// 获取cookie值
function getCookie(cookieName) {
    var cookie = {};
    var all = document.cookie;
    if (all===&quot;&quot;) {
        return cookie;
    }
    var list = all.split(&quot;; &quot;);
    for (var i = 0; i &amp;lt; list.length; i++) {
        var p = list[i].indexOf(&quot;=&quot;);
        var name = list[i].substr(0, p);
        var value = list[i].substr(p + 1);
        value = decodeURIComponent(value);
        cookie[name] = value;
    }
    return cookie;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;参考自：JavaScript权威指南&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;ajax&quot;&gt;Ajax&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;任务：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 学习Ajax，并尝试自己封装一个Ajax方法。实现如下方法：
function ajax(url, options) {
    // your implement
}

// 使用示例：
ajax(
    &#39;http://localhost:8080/server/ajaxtest&#39;, 
    {
        data: {
            name: &#39;simon&#39;,
            password: &#39;123456&#39;
        },
        onsuccess: function (responseText, xhr) {
            console.log(responseText);
        }
    }
);　
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;实现：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function ajax(url, options) {

    var dataResult; //结果data

    // 处理data
    if (typeof(options.data) === &#39;object&#39;) {
        var str = &#39;&#39;;
        for (var c in options.data) {
            str = str + c + &#39;=&#39; + options.data[c] + &#39;&amp;amp;&#39;;
        }
        dataResult = str.substring(0, str.length - 1);
    }

    // 处理type
    options.type = options.type || &#39;GET&#39;;

    //获取XMLHttpRequest对象
    var xhr = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject(&#39;Microsoft.XMLHTTP&#39;);

    // 发送请求
    oXhr.open(options.type, url, true);
    if (options.type == &#39;GET&#39;) {
        oXhr.send(null);
    } else {
        oXhr.setRequestHeader(&#39;Content-type&#39;, &#39;application/x-www-form-urlencoded&#39;);
        oXhr.send(dataResult);
    }

    // readyState
    xhr.onreadystatechange = function() {
        if (xhr.readyState === 4) {
            if (xhr.status === 200) {
                if (options.onsuccess) {
                    options.onsuccess(xhr.responseText, xhr.responseXML);
                }
            } else {
                if (options.onfail) {
                    options.onfail();
                }
            }
        }
    };
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;说明：&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;首先是处理 data，因为测试用例中的 data 是对象，所以把它遍历出来，把键和值中间用 = 连接，和下一组数据用 &amp;amp; 连接。&lt;/li&gt;
  &lt;li&gt;处理 type，默认是 GET 请求。&lt;/li&gt;
  &lt;li&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;open()&lt;/code&gt; 指明请求方法和 url。方法一般为 GET 或 POST。&lt;/li&gt;
  &lt;li&gt;调用 &lt;code class=&quot;highlighter-rouge&quot;&gt;send()&lt;/code&gt; 方法，GET 请求没有主体，所以应该传递 null 或省略这个参数。POST 请求有主体，同时使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;setRequestHeaders()&lt;/code&gt; 来指定 “Content-type” 头。这样便成功发送了请求。&lt;/li&gt;
  &lt;li&gt;取的响应。一个完整的 HTTP 响应是由状态码、响应头集合、响应主体组成。
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;readyState&lt;/code&gt; 是一个整数，它指定了 HTTP 请求的状态。其值和含义如下表：&lt;/li&gt;
    &lt;/ul&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th&gt;值&lt;/th&gt;
          &lt;th&gt;含义&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;0&lt;/td&gt;
          &lt;td&gt;open() 尚未调用&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;open() 已调用&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;2&lt;/td&gt;
          &lt;td&gt;接收到响应头信息&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;3&lt;/td&gt;
          &lt;td&gt;接收到响应主体&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;4&lt;/td&gt;
          &lt;td&gt;响应完成&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;status&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;statusText&lt;/code&gt; 属性以数字和文本的形式返回 HTTP 状态码。这些属性保存标准的 HTTP 值。如，200和 “OK” 表示成功请求，404和 “Not Found” 表示 URL 不能匹配服务器上的任何资源。&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;getResponseHeader()&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;getAllResponseHeaders()&lt;/code&gt; 能查询响应头。&lt;/li&gt;
      &lt;li&gt;响应主体可以从 &lt;code class=&quot;highlighter-rouge&quot;&gt;responseText&lt;/code&gt; 属性中得到文本形式的，从 &lt;code class=&quot;highlighter-rouge&quot;&gt;responseXML&lt;/code&gt; 属性中得到 Document 形式的。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;补充一点 &lt;code class=&quot;highlighter-rouge&quot;&gt;onreadystatechange&lt;/code&gt; 事件会在 &lt;code class=&quot;highlighter-rouge&quot;&gt;readyState&lt;/code&gt; 改变时被触发。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;参考：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.w3school.com.cn/ajax/index.asp&quot;&gt;Ajax W3C&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ibm.com/developerworks/cn/web/wa-lo-comet/&quot;&gt;Comet：基于 HTTP 长连接的“服务器推”技术&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;练习1处理兴趣列表&quot;&gt;练习1：处理兴趣列表&lt;/h2&gt;

&lt;h3 id=&quot;任务要求&quot;&gt;任务要求&lt;/h3&gt;

&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;task0002&lt;/code&gt;目录下创建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;task0002_1.html&lt;/code&gt;文件，以及一个&lt;code class=&quot;highlighter-rouge&quot;&gt;js&lt;/code&gt;目录和&lt;code class=&quot;highlighter-rouge&quot;&gt;css&lt;/code&gt;目录，在&lt;code class=&quot;highlighter-rouge&quot;&gt;js&lt;/code&gt;目录中创建&lt;code class=&quot;highlighter-rouge&quot;&gt;task0002_1.js&lt;/code&gt;，并将之前写的&lt;code class=&quot;highlighter-rouge&quot;&gt;util.js&lt;/code&gt;也拷贝到&lt;code class=&quot;highlighter-rouge&quot;&gt;js&lt;/code&gt;目录下。然后完成以下需求。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第一阶段&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在页面中，有一个单行输入框，一个按钮，输入框中用来输入用户的兴趣爱好，允许用户用半角逗号来作为不同爱好的分隔。&lt;/p&gt;

&lt;p&gt;当点击按钮时，把用户输入的兴趣爱好，按照上面所说的分隔符分开后保存到一个数组，过滤掉空的、重复的爱好，在按钮下方创建一个段落显示处理后的爱好。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第二阶段&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;单行变成多行输入框，一个按钮，输入框中用来输入用户的兴趣爱好，允许用户用换行、空格（全角/半角）、逗号（全角/半角）、顿号、分号来作为不同爱好的分隔。&lt;/p&gt;

&lt;p&gt;当点击按钮时的行为同上&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第三阶段&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;用户输入的爱好数量不能超过10个，也不能什么都不输入。当发生异常时，在按钮上方显示一段红色的错误提示文字，并且不继续执行后面的行为；当输入正确时，提示文字消失。&lt;/p&gt;

&lt;p&gt;同时，当点击按钮时，不再是输出到一个段落，而是每一个爱好输出成为一个checkbox，爱好内容作为checkbox的label。&lt;/p&gt;

&lt;h3 id=&quot;思路&quot;&gt;思路&lt;/h3&gt;

&lt;p&gt;主要就是对字符串的操作，&lt;code class=&quot;highlighter-rouge&quot;&gt;split()&lt;/code&gt; 的使用，以及正则表达式的使用。&lt;/p&gt;

&lt;h3 id=&quot;实现&quot;&gt;实现&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Gaohaoyang/ife/tree/master/task/task0002/work/Gaohaoyang&quot;&gt;代码&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://gaohaoyang.github.io/ife/task/task0002/work/Gaohaoyang/task0002_1.html&quot;&gt;在线demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;练习2倒计时&quot;&gt;练习2：倒计时&lt;/h2&gt;

&lt;h3 id=&quot;任务要求-1&quot;&gt;任务要求&lt;/h3&gt;

&lt;p&gt;在和上一任务同一目录下面创建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;task0002_2.html&lt;/code&gt;文件，在&lt;code class=&quot;highlighter-rouge&quot;&gt;js&lt;/code&gt;目录中创建&lt;code class=&quot;highlighter-rouge&quot;&gt;task0002_2.js&lt;/code&gt;，并在其中编码，实现一个倒计时功能。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;界面首先有一个文本输入框，允许按照特定的格式&lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD&lt;/code&gt;输入年月日；&lt;/li&gt;
  &lt;li&gt;输入框旁有一个按钮，点击按钮后，计算当前距离输入的日期的00:00:00有多少时间差&lt;/li&gt;
  &lt;li&gt;在页面中显示，距离YYYY年MM月DD日还有XX天XX小时XX分XX秒&lt;/li&gt;
  &lt;li&gt;每一秒钟更新倒计时上显示的数&lt;/li&gt;
  &lt;li&gt;如果时差为0，则倒计时停止&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;思路-1&quot;&gt;思路&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;setInterval()&lt;/code&gt; 方法可按照指定的周期（以毫秒计）来调用函数或计算表达式。&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;setInterval()&lt;/code&gt; 方法会不停地调用函数，直到 &lt;code class=&quot;highlighter-rouge&quot;&gt;clearInterval()&lt;/code&gt; 被调用或窗口被关闭。由 &lt;code class=&quot;highlighter-rouge&quot;&gt;setInterval()&lt;/code&gt; 返回的 ID 值可用作 &lt;code class=&quot;highlighter-rouge&quot;&gt;clearInterval()&lt;/code&gt; 方法的参数。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;clearInterval()&lt;/code&gt; 方法可取消由 &lt;code class=&quot;highlighter-rouge&quot;&gt;setInterval()&lt;/code&gt; 设置的 timeout。&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;clearInterval()&lt;/code&gt; 方法的参数必须是由 &lt;code class=&quot;highlighter-rouge&quot;&gt;setInterval()&lt;/code&gt; 返回的 ID 值。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;setTimeout()&lt;/code&gt; 方法用于在指定的毫秒数后调用函数或计算表达式。&lt;/p&gt;

    &lt;p&gt;setTimeout() 只执行 code 一次。如果要多次调用，请使用 setInterval() 或者让 code 自身再次调用 setTimeout()。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;clearTimeout()&lt;/code&gt; 方法可取消由 setTimeout() 方法设置的 timeout。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;实现-1&quot;&gt;实现&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Gaohaoyang/ife/tree/master/task/task0002/work/Gaohaoyang&quot;&gt;代码&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://gaohaoyang.github.io/ife/task/task0002/work/Gaohaoyang/task0002_2.html&quot;&gt;在线demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;练习3图片轮播&quot;&gt;练习3：图片轮播&lt;/h2&gt;

&lt;h3 id=&quot;任务要求-2&quot;&gt;任务要求&lt;/h3&gt;

&lt;p&gt;在和上一任务同一目录下面创建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;task0002_3.html&lt;/code&gt;文件，在&lt;code class=&quot;highlighter-rouge&quot;&gt;js&lt;/code&gt;目录中创建&lt;code class=&quot;highlighter-rouge&quot;&gt;task0002_3.js&lt;/code&gt;，并在其中编码，实现一个轮播图的功能。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;图片数量及URL均在HTML中写好&lt;/li&gt;
  &lt;li&gt;可以配置轮播的顺序（正序、逆序）、是否循环、间隔时长&lt;/li&gt;
  &lt;li&gt;图片切换的动画要流畅&lt;/li&gt;
  &lt;li&gt;在轮播图下方自动生成对应图片的小点，点击小点，轮播图自动动画切换到对应的图片&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;效果示例：&lt;a href=&quot;http://echarts.baidu.com/&quot;&gt;http://echarts.baidu.com/&lt;/a&gt; 上面的轮播图（不需要做左右两个箭头）&lt;/p&gt;

&lt;h3 id=&quot;思路-2&quot;&gt;思路&lt;/h3&gt;

&lt;p&gt;将图片排列成一排，一起向左运动，每次运动的距离刚好是一张图片的宽度。&lt;/p&gt;

&lt;p&gt;对于下面的小圆点，使用事件代理，将事件传递给每个 a 标签。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;参考：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.itxueyuan.org/view/6323.html&quot;&gt;JS图片切换&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;实现-2&quot;&gt;实现&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Gaohaoyang/ife/tree/master/task/task0002/work/Gaohaoyang&quot;&gt;代码&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://gaohaoyang.github.io/ife/task/task0002/work/Gaohaoyang/task0002_3.html&quot;&gt;在线demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;关于变速运动&quot;&gt;关于变速运动&lt;/h3&gt;

&lt;p&gt;评论中有人问到运动部分为什么这样写，下面我讲一下吧。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function startMove(target) {
    clearInterval(timerInner);
    timerInner = setInterval(function() {
        var speed = (target - imgListDiv.offsetLeft) / 6;
        speed = speed &amp;gt; 0 ? Math.ceil(speed) : Math.floor(speed);

        imgListDiv.style.left = imgListDiv.offsetLeft + speed + &quot;px&quot;;
    }, 30);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面是运动部分代码。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;参数 &lt;code class=&quot;highlighter-rouge&quot;&gt;target&lt;/code&gt; 是运动终点的位置。&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;首先停止计时器，为了避免上一次调用方法时，计时器没有关闭带来的干扰。&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;clearInterval(timerInner);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;下面开始开启计时器，每隔 30ms 执行一次内部的函数。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;变速运动&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var speed = (target - imgListDiv.offsetLeft) / 6;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;逐渐变慢，最后停止，距离越远速度越大，速度由距离决定&lt;/p&gt;

    &lt;p&gt;速度=(目标值-当前值)/缩放系数&lt;/p&gt;

    &lt;p&gt;这样写的原因就是为了让它做缓冲运动，而不是匀速运动，这样给用户带来的交互感觉会更好。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;速度取整&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;speed = speed &amp;gt; 0 ? Math.ceil(speed) : Math.floor(speed);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;像素不能是小数，所以速度大于0的时候，向上取整。速度小于0时，向下取整&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;最后关于运动终止条件。&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;imgListDiv.style.left = imgListDiv.offsetLeft + speed + &quot;px&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;由这一行可以看出，&lt;code class=&quot;highlighter-rouge&quot;&gt;imgListDiv.style.left&lt;/code&gt; 在不断增大，即 &lt;code class=&quot;highlighter-rouge&quot;&gt;imgListDiv.offsetLeft&lt;/code&gt; 在不断增大。这两个是相同的属性，只不过一个是在赋值时使用，第二个是在取值时使用。&lt;/p&gt;

    &lt;p&gt;再看这行代码，由于这部分是每个30ms执行一次的，所以继续执行到这里。&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var speed = (target - imgListDiv.offsetLeft) / 6;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;当不断增大的 &lt;code class=&quot;highlighter-rouge&quot;&gt;imgListDiv.offsetLeft&lt;/code&gt; 等于 &lt;code class=&quot;highlighter-rouge&quot;&gt;target&lt;/code&gt; 时，&lt;code class=&quot;highlighter-rouge&quot;&gt;speed&lt;/code&gt; 为0。宏观表现为不再运动，这便是运动终止的状态，但是这里的方法还是不断在执行，每个30ms在执行。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;练习4输入框即时提示&quot;&gt;练习4：输入框即时提示&lt;/h2&gt;

&lt;h3 id=&quot;任务要求-3&quot;&gt;任务要求&lt;/h3&gt;

&lt;p&gt;在和上一任务同一目录下面创建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;task0002_4.html&lt;/code&gt;文件，在&lt;code class=&quot;highlighter-rouge&quot;&gt;js&lt;/code&gt;目录中创建&lt;code class=&quot;highlighter-rouge&quot;&gt;task0002_4.js&lt;/code&gt;，并在其中编码，实现一个类似百度搜索框的输入提示的功能。&lt;/p&gt;

&lt;p&gt;要求如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;允许使用鼠标点击选中提示栏中的某个选项&lt;/li&gt;
  &lt;li&gt;允许使用键盘上下键来选中提示栏中的某个选项，回车确认选中&lt;/li&gt;
  &lt;li&gt;选中后，提示内容变更到输入框中&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;初级班：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;不要求和后端交互，可以自己伪造一份提示数据例如：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var suggestData = [&#39;Simon&#39;, &#39;Erik&#39;, &#39;Kener&#39;];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;中级班：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;自己搭建一个后端Server，使用Ajax来获取提示数据&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;思路-3&quot;&gt;思路&lt;/h3&gt;

&lt;p&gt;这里我使用了给 input 标签加 input 监听，即输入框内容发生改变时，触发事件。并兼容到 IE7。&lt;/p&gt;

&lt;p&gt;关于 input 监听的代码如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function addInputListener() {
    if (inputArea.addEventListener) { // all browsers except IE before version 9
        inputArea.addEventListener(&quot;input&quot;, OnInput);
    }
    if (inputArea.attachEvent) { // Internet Explorer and Opera
        inputArea.attachEvent(&quot;onpropertychange&quot;, OnPropChanged); // Internet Explorer
    }
}

// Firefox, Google Chrome, Opera, Safari from version 5, Internet Explorer from version 9
function OnInput(event) {
    var inputValue = event.target.value;
    handleInput(inputValue);
}
// Internet Explorer
function OnPropChanged(event) {
    var inputValue = &quot;&quot;;
    if (event.propertyName.toLowerCase() == &quot;value&quot;) {
        inputValue = event.srcElement.value;
        handleInput(inputValue);
    }
} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其中 handleInput() 为下一步要执行的方法。&lt;/p&gt;

&lt;p&gt;其实后来想了想也可以使用 keyup 事件了做这个任务。&lt;/p&gt;

&lt;p&gt;匹配的过程同样适用正则表达式，从开头开始匹配。遍历备选单词，如果匹配成功，则放入 li 标签中，准备展示。&lt;/p&gt;

&lt;p&gt;然后分别添加点击事件，键盘的 keydown 事件，用来选中提示出的单词。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;参考：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://help.dottoro.com/ljhxklln.php&quot;&gt;oninput 事件&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;实现-3&quot;&gt;实现&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Gaohaoyang/ife/tree/master/task/task0002/work/Gaohaoyang&quot;&gt;代码&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://gaohaoyang.github.io/ife/task/task0002/work/Gaohaoyang/task0002_4.html&quot;&gt;在线demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;练习5拖拽交互&quot;&gt;练习5：拖拽交互&lt;/h2&gt;

&lt;h3 id=&quot;任务要求-4&quot;&gt;任务要求&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;实现一个可拖拽交互的界面&lt;/li&gt;
  &lt;li&gt;如示例图，左右两侧各有一个容器，里面的选项可以通过拖拽来左右移动&lt;/li&gt;
  &lt;li&gt;被选择拖拽的容器在拖拽过程后，在原容器中消失，跟随鼠标移动&lt;/li&gt;
  &lt;li&gt;注意拖拽释放后，要添加到准确的位置&lt;/li&gt;
  &lt;li&gt;拖拽到什么位置认为是可以添加到新容器的规则自己定&lt;/li&gt;
  &lt;li&gt;注意交互中良好的用户体验和使用引导&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;思路-4&quot;&gt;思路&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;页面布局时，将要被拖拽的 div 设置为绝对定位，因为这样在后面拖拽的时候才方便更改坐标。&lt;/li&gt;
  &lt;li&gt;初始化界面的时候，首先让 div 块按照相应的高度重新排列一下。&lt;/li&gt;
  &lt;li&gt;拖拽方法的实现。由 mousedown mousemove mouseup 三部分组成。&lt;/li&gt;
  &lt;li&gt;在 mousemove 中判断，不能让鼠标拖出浏览器窗口。&lt;/li&gt;
  &lt;li&gt;在 mouseup 中判断，是否到达指定区域。完成拖拽。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我在这里没有使用 html5 中的拖拽 API，所以兼容性还是很好的。&lt;/p&gt;

&lt;h3 id=&quot;实现-4&quot;&gt;实现&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Gaohaoyang/ife/tree/master/task/task0002/work/Gaohaoyang&quot;&gt;代码&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://gaohaoyang.github.io/ife/task/task0002/work/Gaohaoyang/task0002_5.html&quot;&gt;在线demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;最终作品&quot;&gt;最终作品&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Gaohaoyang/ife/tree/master/task/task0002/work/Gaohaoyang&quot;&gt;代码&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://gaohaoyang.github.io/ife/task/task0002/work/Gaohaoyang/index.html&quot;&gt;在线 Demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;加油！向着下一个目标前进！&lt;/p&gt;
</description>
        <pubDate>Wed, 22 Apr 2015 12:06:05 -0700</pubDate>
        <link>/2015/04/22/baidu-ife-2-javascript/</link>
        <guid isPermaLink="true">/2015/04/22/baidu-ife-2-javascript/</guid>
        
        
        <category>Front-end</category>
        
        <category>JavaScript</category>
        
      </item>
    
      <item>
        <title>百度Web前端技术学院(1)-HTML, CSS基础</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#任务&quot; id=&quot;markdown-toc-任务&quot;&gt;任务&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#css-如何工作&quot; id=&quot;markdown-toc-css-如何工作&quot;&gt;CSS 如何工作&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#层叠和继承&quot; id=&quot;markdown-toc-层叠和继承&quot;&gt;层叠和继承&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#选择器&quot; id=&quot;markdown-toc-选择器&quot;&gt;选择器&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#标签选择器&quot; id=&quot;markdown-toc-标签选择器&quot;&gt;标签选择器&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#类选择器class-selectors&quot; id=&quot;markdown-toc-类选择器class-selectors&quot;&gt;类选择器（Class selectors）&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#id选择器id-selectors&quot; id=&quot;markdown-toc-id选择器id-selectors&quot;&gt;ID选择器（ID selectors）&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#优先级&quot; id=&quot;markdown-toc-优先级&quot;&gt;优先级&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#伪类选择器pseudo-classes-selectors&quot; id=&quot;markdown-toc-伪类选择器pseudo-classes-selectors&quot;&gt;伪类选择器（Pseudo-classes selectors）&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#基于关系的选择器&quot; id=&quot;markdown-toc-基于关系的选择器&quot;&gt;基于关系的选择器&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#其他属性&quot; id=&quot;markdown-toc-其他属性&quot;&gt;其他属性&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#text-indent&quot; id=&quot;markdown-toc-text-indent&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;text-indent&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#text-transform&quot; id=&quot;markdown-toc-text-transform&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;text-transform&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#text-decoration&quot; id=&quot;markdown-toc-text-decoration&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;text-decoration&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#text-align&quot; id=&quot;markdown-toc-text-align&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;text-align&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#word-spacing&quot; id=&quot;markdown-toc-word-spacing&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;word-spacing&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#white-space&quot; id=&quot;markdown-toc-white-space&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;white-space&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#font-face&quot; id=&quot;markdown-toc-font-face&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@font-face&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#深入了解行高属性&quot; id=&quot;markdown-toc-深入了解行高属性&quot;&gt;深入了解行高属性&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#盒模型及定位&quot; id=&quot;markdown-toc-盒模型及定位&quot;&gt;盒模型及定位&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#已知宽度的div居中&quot; id=&quot;markdown-toc-已知宽度的div居中&quot;&gt;已知宽度的div居中&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#对于居中的补充&quot; id=&quot;markdown-toc-对于居中的补充&quot;&gt;对于居中的补充&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#早期css滑动门&quot; id=&quot;markdown-toc-早期css滑动门&quot;&gt;早期css滑动门&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#左侧固定右侧自适应宽度的两列布局&quot; id=&quot;markdown-toc-左侧固定右侧自适应宽度的两列布局&quot;&gt;左侧固定右侧自适应宽度的两列布局&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#双飞翼布局&quot; id=&quot;markdown-toc-双飞翼布局&quot;&gt;双飞翼布局&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#浮动布局&quot; id=&quot;markdown-toc-浮动布局&quot;&gt;浮动布局&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#清除浮动闭合浮动&quot; id=&quot;markdown-toc-清除浮动闭合浮动&quot;&gt;清除浮动/闭合浮动&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#box-sizing&quot; id=&quot;markdown-toc-box-sizing&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;box-sizing&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#响应式布局&quot; id=&quot;markdown-toc-响应式布局&quot;&gt;响应式布局&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#多列布局&quot; id=&quot;markdown-toc-多列布局&quot;&gt;多列布局&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#bfc-和-ie-的-haslayout&quot; id=&quot;markdown-toc-bfc-和-ie-的-haslayout&quot;&gt;BFC 和 IE 的 hasLayout&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#div-三列等高&quot; id=&quot;markdown-toc-div-三列等高&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt; 三列等高&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#去除inline-block元素间间距&quot; id=&quot;markdown-toc-去除inline-block元素间间距&quot;&gt;去除inline-block元素间间距&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#最终作品&quot; id=&quot;markdown-toc-最终作品&quot;&gt;最终作品&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#参考资料&quot; id=&quot;markdown-toc-参考资料&quot;&gt;参考资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;任务&quot;&gt;任务&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;任务：&lt;/strong&gt; &lt;a href=&quot;https://github.com/Gaohaoyang/ife/tree/master/task/task0001&quot;&gt;HTML、CSS基础&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;有人问到提交作业 fork 同步的问题，真心觉得官方 GitHub 的帮助文档讲的很好，我上一篇博客 &lt;a href=&quot;http://gaohaoyang.github.io/2015/04/12/Syncing-a-fork/&quot;&gt;同步一个 fork&lt;/a&gt; 就是翻译的这个官方文档，如果懒得看英文可以参考我的博客。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;写点东西记录一下我的做题过程吧。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;css-如何工作&quot;&gt;CSS 如何工作&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Getting_started/How_CSS_works&quot;&gt;CSS 如何工作&lt;/a&gt; Mozilla 的开发者文档讲的很好。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;浏览器在展现一个文档的时候，必须要把文档内容和相应的样式信息结合起来展示。 这个处理过程一般分两个阶段：&lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;浏览器先将标记语言和 CSS 转换成 DOM (文档对象模型)结构。 这时 DOM 就代表了电脑内存中的相应文档，因为它已经融合了文档内容和相应的样式表。&lt;/li&gt;
    &lt;li&gt;最后浏览器把 DOM 的内容展示出来。&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;层叠和继承&quot;&gt;层叠和继承&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Getting_started/Cascading_and_inheritance&quot;&gt;参考资料: 层叠和继承&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;对于层叠来说，共有三种主要的样式来源：&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;浏览器对HTML定义的默认样式。&lt;/li&gt;
    &lt;li&gt;用户定义的样式。&lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;开发者定义的样式，可以有三种形式：&lt;/p&gt;

      &lt;ul&gt;
        &lt;li&gt;定义在外部文件（外链样式）：本教程中案例主要是通过这种形式定义样式。&lt;/li&gt;
        &lt;li&gt;在页面的头部定义（内联样式）：通过这种形式定义的样式只在本页面内生效。&lt;/li&gt;
        &lt;li&gt;定义在特定的元素身上（行内样式）：这种形式多用于测试，可维护性较差。&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;用户定义的样式表会覆盖浏览器定义的默认样式，然后网页开发者定义的样式又会覆盖用户样式。&lt;/p&gt;

  &lt;p&gt;再来看看优先级，从高到低依次为：网页开发者定义的样式、网页阅读者定义的样式、浏览器的默认样式。&lt;/p&gt;

  &lt;p&gt;对继承的元素来说，子元素自身的样式优先级高于从父级继承来的样式。&lt;/p&gt;

  &lt;blockquote&gt;
    &lt;p&gt;更多细节 &lt;br /&gt;
CSS 另外提供了一个 !important 关键字，用户可以通过使用这个关键字使自己定义的样式覆盖掉开发者定义的样式。 &lt;br /&gt;
这就意味着，作为开发者，你很难准确的预知页面最终在用户电脑上的显示效果。&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;选择器&quot;&gt;选择器&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Getting_Started/Selectors&quot;&gt;参考资料:选择器（Selectors）&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;标签选择器&quot;&gt;标签选择器&lt;/h3&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;类选择器class-selectors&quot;&gt;类选择器（Class selectors）&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;通过设置元素的 class 属性，可以为元素指定类名。类名由开发者自己指定。 文档中的多个元素可以拥有同一个类名。&lt;/p&gt;

  &lt;p&gt;在写样式表时，类选择器是以英文句号（.）开头的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;id选择器id-selectors&quot;&gt;ID选择器（ID selectors）&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;通过设置元素的 id 属性为该元素制定ID。ID名由开发者指定。每个ID在文档中必须是唯一的。&lt;/p&gt;

  &lt;p&gt;在写样式表时，ID选择器是以#开头的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;优先级&quot;&gt;优先级&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;如果多余一个规则指定了相同的属性值都应用到一个元素上，CSS规定拥有更高确定度的选择器优先级更高。ID选择器比类选择器更具确定度, 而类选择器比标签选择器（tag selector）更具确定度。&lt;/li&gt;
    &lt;li&gt;如果样式中包含冲突的规则，且它们具有相同的确定度。那么，后出现的规则优先级高。&lt;/li&gt;
    &lt;li&gt;如果你遇到规则冲突，你可以增加其中一条的确定度或将之移到后面以使它具有更高优先级。&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;伪类选择器pseudo-classes-selectors&quot;&gt;伪类选择器（Pseudo-classes selectors）&lt;/h3&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;基于关系的选择器&quot;&gt;基于关系的选择器&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;选择器&lt;/th&gt;
      &lt;th&gt;选择的元素&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;A E&lt;/td&gt;
      &lt;td&gt;任何是元素A的后代元素E (后代节点指A的子节点，子节点的子节点，以此类推)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;A &amp;gt; E&lt;/td&gt;
      &lt;td&gt;任何元素A的子元素&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;E:first-child&lt;/td&gt;
      &lt;td&gt;任何元素的第一个子元素E&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;B + E&lt;/td&gt;
      &lt;td&gt;任何元素B的下一个兄弟元素E&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;其他属性&quot;&gt;其他属性&lt;/h2&gt;

&lt;h3 id=&quot;text-indent&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;text-indent&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;定义和用法&lt;/strong&gt; &lt;br /&gt;
text-indent 属性规定文本块中首行文本的缩进。 &lt;br /&gt;
注释：允许使用负值。如果使用负值，那么首行会被缩进到左边。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;可能的值&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;值&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;length&lt;/td&gt;
      &lt;td&gt;定义固定的缩进。默认值：0。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%&lt;/td&gt;
      &lt;td&gt;定义基于父元素宽度的百分比的缩进。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;inherit&lt;/td&gt;
      &lt;td&gt;规定应该从父元素继承 text-indent 属性的值。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;text-transform&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;text-transform&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;定义和用法&lt;/strong&gt;  &lt;br /&gt;
text-transform 属性控制文本的大小写。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;  &lt;br /&gt;
这个属性会改变元素中的字母大小写，而不论源文档中文本的大小写。如果值为 capitalize，则要对某些字母大写，但是并没有明确定义如何确定哪些字母要大写，这取决于用户代理如何识别出各个“词”。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;可能的值&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;值&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;默认。定义带有小写字母和大写字母的标准的文本。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;capitalize&lt;/td&gt;
      &lt;td&gt;文本中的每个单词以大写字母开头。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;uppercase&lt;/td&gt;
      &lt;td&gt;定义仅有大写字母。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;lowercase&lt;/td&gt;
      &lt;td&gt;定义无大写字母，仅有小写字母。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;inherit&lt;/td&gt;
      &lt;td&gt;规定应该从父元素继承 text-transform 属性的值。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;text-decoration&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;text-decoration&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;定义和用法&lt;/strong&gt; &lt;br /&gt;
text-decoration 属性规定添加到文本的修饰。  &lt;br /&gt;
注释：修饰的颜色由 “color” 属性设置。  &lt;br /&gt;
注释：IE、Chrome 或 Safari 不支持 “blink” 属性值。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;  &lt;br /&gt;
这个属性允许对文本设置某种效果，如加下划线。如果后代元素没有自己的装饰，祖先元素上设置的装饰会“延伸”到后代元素中。不要求用户代理支持 blink。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;text-align&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;text-align&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;定义和用法&lt;/strong&gt; &lt;br /&gt;
text-align 属性规定元素中的文本的水平对齐方式。 &lt;br /&gt;
该属性通过指定行框与哪个点对齐，从而设置块级元素内文本的水平对齐方式。通过允许用户代理调整行内容中字母和字之间的间隔，可以支持值 justify；不同用户代理可能会得到不同的结果。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;可能的值&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;值&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;left&lt;/td&gt;
      &lt;td&gt;把文本排列到左边。默认值：由浏览器决定。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;right&lt;/td&gt;
      &lt;td&gt;把文本排列到右边。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;center&lt;/td&gt;
      &lt;td&gt;把文本排列到中间。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;justify&lt;/td&gt;
      &lt;td&gt;实现两端对齐文本效果。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;inherit&lt;/td&gt;
      &lt;td&gt;规定应该从父元素继承 text-align 属性的值。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;word-spacing&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;word-spacing&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;定义&lt;/strong&gt; &lt;br /&gt;
word-spacing 属性增加或减少单词间的空白（即字间隔）。 &lt;br /&gt;
该属性定义元素中字之间插入多少空白符。针对这个属性，“字” 定义为由空白符包围的一个字符串。如果指定为长度值，会调整字之间的通常间隔；所以，normal 就等同于设置为 0。允许指定负长度值，这会让字之间挤得更紧。 &lt;br /&gt;
注释：允许使用负值。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;white-space&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;white-space&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;定义和用法&lt;/strong&gt; &lt;br /&gt;
white-space 属性设置如何处理元素内的空白。 &lt;br /&gt;
这个属性声明建立布局过程中如何处理元素中的空白符。值 pre-wrap 和 pre-line 是 CSS 2.1 中新增的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;可能的值&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;值&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;normal&lt;/td&gt;
      &lt;td&gt;默认。空白会被浏览器忽略。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;pre&lt;/td&gt;
      &lt;td&gt;空白会被浏览器保留。其行为方式类似 HTML 中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; 标签。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;nowrap&lt;/td&gt;
      &lt;td&gt;文本不会换行，文本会在在同一行上继续，直到遇到 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;br&amp;gt;&lt;/code&gt; 标签为止。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;pre-wrap&lt;/td&gt;
      &lt;td&gt;保留空白符序列，但是正常地进行换行。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;pre-line&lt;/td&gt;
      &lt;td&gt;合并空白符序列，但是保留换行符。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;inherit&lt;/td&gt;
      &lt;td&gt;规定应该从父元素继承 white-space 属性的值。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;font-face&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@font-face&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;CSS3 @font-face 规则&lt;/strong&gt; &lt;br /&gt;
在 CSS3 之前，web 设计师必须使用已在用户计算机上安装好的字体。 &lt;br /&gt;
通过 CSS3，web 设计师可以使用他们喜欢的任意字体。 &lt;br /&gt;
当您您找到或购买到希望使用的字体时，可将该字体文件存放到 web 服务器上，它会在需要时被自动下载到用户的计算机上。 &lt;br /&gt;
您“自己的”的字体是在 CSS3 @font-face 规则中定义的。&lt;/p&gt;

&lt;p&gt;注释：Internet Explorer 8 以及更早的版本不支持新的 @font-face 规则。Internet Explorer 9+ 支持新的 @font-face 规则，但是仅支持 .eot 类型的字体 (Embedded OpenType)。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;使用您需要的字体&lt;/strong&gt; &lt;br /&gt;
在新的 @font-face 规则中，您必须首先定义字体的名称（比如 myFirstFont），然后指向该字体文件。 &lt;br /&gt;
如需为 HTML 元素使用字体，请通过 font-family 属性来引用字体的名称 (myFirstFont)：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;实例&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@font-face {
    font-family: myFirstFont;
    src: url(&#39;Sansation_Light.ttf&#39;), 
         url(&#39;Sansation_Light.eot&#39;); /* IE9+ */
}
div {
    font-family: myFirstFont;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;CSS3 字体描述符&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;下面的表格列出了能够在 @font-face 规则中定义的所有字体描述符：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;描述符&lt;/th&gt;
      &lt;th&gt;值&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;font-family&lt;/td&gt;
      &lt;td&gt;name&lt;/td&gt;
      &lt;td&gt;必需。规定字体的名称。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;src&lt;/td&gt;
      &lt;td&gt;URL&lt;/td&gt;
      &lt;td&gt;必需。定义字体文件的 URL。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;font-stretch&lt;/td&gt;
      &lt;td&gt;normal&lt;br /&gt;condensed&lt;br /&gt;ultra-condensed&lt;br /&gt;extra-condensed&lt;br /&gt;semi-condensed&lt;br /&gt;expanded&lt;br /&gt;semi-expanded&lt;br /&gt;extra-expanded&lt;br /&gt;ultra-expanded&lt;/td&gt;
      &lt;td&gt;可选。定义如何拉伸字体。默认是 “normal”。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;font-style&lt;/td&gt;
      &lt;td&gt;ormal&lt;br /&gt;italic&lt;br /&gt;oblique&lt;/td&gt;
      &lt;td&gt;可选。定义字体的样式。默认是 “normal”。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;font-weight&lt;/td&gt;
      &lt;td&gt;normal&lt;br /&gt;bold&lt;br /&gt;100&lt;br /&gt;200&lt;br /&gt;300&lt;br /&gt;400&lt;br /&gt;500&lt;br /&gt;600&lt;br /&gt;700&lt;br /&gt;800&lt;br /&gt;900&lt;/td&gt;
      &lt;td&gt;选。定义字体的粗细。默认是 “normal”。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;unicode-range&lt;/td&gt;
      &lt;td&gt;unicode-range&lt;/td&gt;
      &lt;td&gt;可选。定义字体支持的 UNICODE 字符范围。默认是 “U+0-10FFFF”。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;深入了解行高属性&quot;&gt;深入了解行高属性&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/fengzheng126/archive/2012/05/18/2507632.html&quot;&gt;参考：深入了解css的行高Line Height属性&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;一般来说，设置行高为&lt;code class=&quot;highlighter-rouge&quot;&gt;值：纯数字&lt;/code&gt;是最理想的方式，因为其会随着对应的 &lt;code class=&quot;highlighter-rouge&quot;&gt;font-size&lt;/code&gt; 而缩放。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;盒模型及定位&quot;&gt;盒模型及定位&lt;/h2&gt;

&lt;h3 id=&quot;已知宽度的div居中&quot;&gt;已知宽度的div居中&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;用两种方法来实现一个背景色为红色、宽度为960px的&amp;lt;DIV&amp;gt;在浏览器中居中&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我的方法一：&lt;/p&gt;

&lt;p&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;margin：0 auto;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;html文件&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Document&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/css&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;task0001-2.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;center&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;aaa&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;css文件&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.center {
    width: 960px;
    margin: 0 auto;
    background-color: red;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;方法二：&lt;/p&gt;

&lt;p&gt;绝对定位，左边距离 body 50%，&lt;code class=&quot;highlighter-rouge&quot;&gt;margin-left: -480px&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.center {
    width: 960px;
    background-color: red;
    position: absolute;
    left: 50%;
    margin-left: -480px;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://gaohaoyang.github.io/baidu-ife-practice/task0001/task0001-2.html&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;对于居中的补充&quot;&gt;对于居中的补充&lt;/h4&gt;

&lt;p&gt;参考自 &lt;a href=&quot;http://zh.learnlayout.com/&quot;&gt;学习CSS布局&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;像下面这样写css代码，使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;max-width&lt;/code&gt; 替代 &lt;code class=&quot;highlighter-rouge&quot;&gt;width&lt;/code&gt;  可以使浏览器更好地处理小窗口的情况。这点在移动设备上显得尤为重要。&lt;/p&gt;

&lt;p&gt;有效的避免了如下问题： &lt;br /&gt;
当浏览器窗口比元素的宽度还要窄时，浏览器会显示一个水平滚动条来容纳页面。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#main {
    max-width: 600px;
    margin: 0 auto; 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/2050/p/3392803.html&quot;&gt;CSS布局奇淫技巧之–各种居中&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;早期css滑动门&quot;&gt;早期css滑动门&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;有的圆角矩形是复杂图案，无法直接用border-radius，请在不使用 border-radius 的情况下实现一个可复用的高度和宽度都自适应的圆角矩形 &lt;br /&gt;
示例 &lt;img src=&quot;http://7q5cdt.com1.z0.glb.clouddn.com/Baidu-Front-end-task0001_7.png&quot; alt=&quot;圆角矩形&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这道题我一开始不会做，查阅了资料，发现这就是所谓的 css 滑动门的应用。&lt;a href=&quot;http://www.bkjia.com/webzh/759711.html&quot;&gt;妙味云课堂之css：滑动门、圆角、css精灵&lt;/a&gt; &lt;br /&gt;
使用三层嵌套，或者四层嵌套的 &lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt;，通过背景图定位等方式可以实现。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;左侧固定右侧自适应宽度的两列布局&quot;&gt;左侧固定右侧自适应宽度的两列布局&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;用两种不同的方法来实现一个两列布局，其中左侧部分宽度固定、右侧部分宽度随浏览器宽度的变化而自适应变化 &lt;img src=&quot;http://7q5cdt.com1.z0.glb.clouddn.com/Baidu-Front-end-task0001_3.jpg&quot; alt=&quot;pic&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我的方法一：&lt;/p&gt;

&lt;p&gt;不使用浮动，使用绝对定位，将左上角的块放好位置，右边的块设置&lt;code class=&quot;highlighter-rouge&quot;&gt;margin-left&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;html 文件：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;layout&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/css&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;task0001-6-3.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;row&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;left&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;DIV-A&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;right&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;DIV-B&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bottom&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;DIV-C&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;css 文件：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.row {
    position: relative;
}
.left {
    width: 100px;
    height: 100px;
    background-color: red;
    position: absolute;
    top: 0;
    left: 0;
}
.right {
    height: 100px;
    background-color: blue;
    margin-left: 100px;
}
.bottom {
    height: 100px;
    background-color: yellow;
} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;方法二：&lt;/p&gt;

&lt;p&gt;使用浮动，左边的块使用浮动，右边的块使用&lt;code class=&quot;highlighter-rouge&quot;&gt;margin-left&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.left {
    width: 100px;
    height: 100px;
    background-color: red;
    float: left;
}
.right {
    height: 100px;
    background-color: blue;
    margin-left: 100px;
}
.bottom {
    height: 100px;
    background-color: yellow;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://gaohaoyang.github.io/baidu-ife-practice/task0001/task0001-6-3.html&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;补充：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;看完了后面的 BFC 之后，本题和下一题都可以用另一种方法了
总之我已经震惊了！太爽了！有没有！&lt;/p&gt;

&lt;p&gt;html&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;使用 BFC 进行两列布局&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;two-col-layout-with-BFC.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;left&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;DIV-A&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;right&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;DIV-B&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bottom&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;DIV-C&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;css&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.left{
    width: 100px;
    height: 100px;
    background-color: blue;
    float: left;
}
.right{
    height: 100px;
    background-color: yellow;
    overflow: hidden;
}
.bottom{
    height: 100px;
    background-color: red;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://gaohaoyang.github.io/baidu-ife-practice/task0001/two-col-layout-with-BFC.html&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;双飞翼布局&quot;&gt;双飞翼布局&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;用两种不同的方式来实现一个三列布局，其中左侧和右侧的部分宽度固定，中间部分宽度随浏览器宽度的变化而自适应变化&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;原题中参考资料 &lt;a href=&quot;http://www.imooc.com/wenda/detail/254035&quot;&gt;双飞翼布局&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Flying Swing Layout&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/css&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;task0001-6-4.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bd&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;main-wrap&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Flying Swing Layout&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sub&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Flying Swing Layout&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
                left
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;extra&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Flying Swing Layout&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
                right
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;css&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.bd {

    /*padding: 0 190px;*/
}
.main {
    float: left;
    width: 100%;
    background-color: #aaa;
}
.main-wrap {
    margin: 0 190px;
}
.sub {
    float: left;
    width: 190px;
    margin-left: -100%;
    background-color: blue;        
    /*position: relative;
    left: -190px;*/
}
.extra {
    float: left;
    width: 190px;
    margin-left: -190px;
    background-color: yellow;        
    /*position: relative;
    right: -190px;*/
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://gaohaoyang.github.io/baidu-ife-practice/task0001/task0001-6-4.html&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;补充：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;使用 BFC 的另一种方法，我再一次震惊！&lt;/p&gt;

&lt;p&gt;代码超级简单！&lt;/p&gt;

&lt;p&gt;html&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;flying-Swing-BFC&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;flying-Swing-BFC.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;left&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;left&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;right&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;right&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            flying-Swing-BFC.htmlflying-Swing-BFC.htmlflying-Swing-BFC.htmlflying-Swing-BFC.htmlflying-Swing-BFC.htmlflying-Swing-BFC.htmlflying-Swing-BFC.htmlflying-Swing-BFC.htmlflying-Swing-BFC.htmlflying-Swing-BFC.htmlflying-Swing-BFC.html
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;footer&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            footerfooterfooterfooterfooterfooterfooterfooterfooter
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;css&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.left{
    width: 100px;
    background-color: red;
    float: left;
}
.right{
    width: 200px;
    background-color: blue;
    float: right;
}
.main{
    background-color: #eee;
    overflow: hidden;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://gaohaoyang.github.io/baidu-ife-practice/task0001/flying-Swing-BFC.html&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;浮动布局&quot;&gt;浮动布局&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;实现一个浮动布局，红色容器中每一行的蓝色容器数量随着浏览器宽度的变化而变化 &lt;img src=&quot;http://7q5cdt.com1.z0.glb.clouddn.com/Baidu-Front-end-task0001_4.jpg&quot; alt=&quot;pic&quot; /&gt;&lt;img src=&quot;http://7q5cdt.com1.z0.glb.clouddn.com/Baidu-Front-end-task0001_5.jpg&quot; alt=&quot;pic&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个题我觉的直接将每一个块浮动起来就好了，不知我理解的对不对。&lt;/p&gt;

&lt;p&gt;html文件&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Document&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/css&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;task0001-6-5.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;css文件&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;body {
    background-color: red;
}
div {
    width: 150px;
    height: 100px;
    margin: 10px;
    float: left;
    background-color: blue;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;file:///E:/GitWorkSpace/baidu-ife-practice/task0001/task0001-6-5.html&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;清除浮动闭合浮动&quot;&gt;清除浮动/闭合浮动&lt;/h3&gt;

&lt;p&gt;参考自 &lt;a href=&quot;http://www.iyunlu.com/view/css-xhtml/55.html&quot;&gt;那些年我们一起清除过的浮动 by 一丝冰凉&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;清除浮动：清除对应的单词是 clear，对应CSS中的属性是 clear：left | right | both | none；&lt;/li&gt;
  &lt;li&gt;闭合浮动：更确切的含义是使浮动元素闭合，从而减少浮动带来的影响。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我们想要达到的效果更确切地说是闭合浮动，而不是单纯的清除浮动，设置clear：both清除浮动并不能解决warp高度塌陷的问题。&lt;/p&gt;

&lt;p&gt;正是因为浮动的这种特性，导致本属于普通流中的元素浮动之后，包含框内部由于不存在其他普通流元素了，也就表现出高度为0（&lt;strong&gt;高度塌陷&lt;/strong&gt;）。在实际布局中，往往这并不是我们所希望的，所以需要闭合浮动元素，使其包含框表现出正常的高度。&lt;/p&gt;

&lt;p&gt;最后一丝姐给了两个精益求精方案，我觉得方案一更易于理解，这里实践一下：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://gaohaoyang.github.io/baidu-ife-practice/task0001/close-float.html&quot;&gt;闭合浮动的Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下面是源码&lt;/p&gt;

&lt;p&gt;html&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Document&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;close-float.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;row clearfix&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;left&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;left&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;Content or Something&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;right&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;right&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;row2&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Row2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;css&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.row {
    border: 1px solid red;
}
.clearfix:after {
    content: &quot;\200B&quot;;
    display: block;
    height: 0;
    clear: both;
}
.clearfix {
    *zoom: 1;
}
.left {
    width: 200px;
    float: left;
    background-color: #eee;
}
.right {
    width: 200px;
    float: right;
    background-color: #eee;
}
.row2 {
    width: 600px;
    height: 50px;
    background-color: #aaa;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其中&lt;code class=&quot;highlighter-rouge&quot;&gt;*zoom: 1&lt;/code&gt;是为了触发&lt;code class=&quot;highlighter-rouge&quot;&gt;hasLayout&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;还有另一种解决方案！&lt;/p&gt;

&lt;p&gt;参考自：&lt;a href=&quot;http://zh.learnlayout.com/clearfix.html&quot;&gt;清除浮动（clearfix hack）&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;直接使用，如下代码即可&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.clearfix{
    overflow: auto;
    zoom: 1;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://gaohaoyang.github.io/baidu-ife-practice/task0001/close-float-2.html&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(实际上，我看完后面的资料，再翻到这里就明白了！正是使用了BFC原理！！！！！！！)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;但是今天遇到一个坑！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果使用了 &lt;code class=&quot;highlighter-rouge&quot;&gt;over-flow&lt;/code&gt;，在后面如果有元素要绝对布局在父元素的外面的，意思就是出现 &lt;code class=&quot;highlighter-rouge&quot;&gt;top&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;bottom&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;left&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;right&lt;/code&gt; 的值为负值时，就会出现看不到，或者滚动条的问题！&lt;/p&gt;

&lt;p&gt;若是有这种要求，我觉得还是用一丝姐姐的解决方案比较好。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;box-sizing&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;box-sizing&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;当你设置一个元素为 &lt;code class=&quot;highlighter-rouge&quot;&gt;box-sizing: border-box;&lt;/code&gt; 时，此元素的内边距和边框不再会增加它的宽度。&lt;/p&gt;

&lt;p&gt;他们的内边距和边框都是向内的挤压的。支持IE8+，需要加浏览器内核。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.simple {
    width: 500px;
    margin: 20px auto;
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;响应式布局&quot;&gt;响应式布局&lt;/h3&gt;

&lt;p&gt;媒体查询&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Media_queries&quot;&gt;MDN CSS媒体查询&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://zh.learnlayout.com/media-queries.html&quot;&gt;媒体查询-学习CSS布局&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@media screen and (min-width: 500px) and (max-width: 800px) { ... }&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dev.opera.com/articles/an-introduction-to-meta-viewport-and-viewport/&quot;&gt;An Introduction to Meta Viewport and @viewport&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;多列布局&quot;&gt;多列布局&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://zh.learnlayout.com/column.html&quot;&gt;column&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;bfc-和-ie-的-haslayout&quot;&gt;BFC 和 IE 的 hasLayout&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/pigtail/archive/2013/01/23/2871627.html&quot;&gt;BFC和IE的hasLayout&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://outofmemory.cn/wr/?u=http%3A%2F%2Fkkeys.me%2Fpost%2F68547473290&quot;&gt;Block Formatting Context 的几大用处&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;看完这个资料后我震惊了！竟然可以这么玩儿！ &lt;br /&gt;
我将本文之前提到的两列布局，双飞翼布局又重新写了一遍！太爽了！代码超级简洁！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Block Formatting Context 的几大用处：&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;防止 margin 折叠&lt;/li&gt;
  &lt;li&gt;清除float&lt;/li&gt;
  &lt;li&gt;不会环绕float元素&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;相关资料&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/CSS/Visual_formatting_model&quot;&gt;视觉格式化模型(visual formatting model)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/CSS/Block_formatting_context&quot;&gt;块格式化上下文(block formatting context)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;div-三列等高&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt; 三列等高&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://show.sysu.edu.cn/?action-blogdetail-uid-2383-id-5040&quot;&gt;纯CSS实现三列DIV等高布局&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;最关键的地方有3句：&lt;/p&gt;

&lt;p&gt;最外层div设置一个溢出隐藏&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#wrap {
    overflow:hidden;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;每一个子块设置 padding 和 margin&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#left,#center,#right{
    margin-bottom:-10000px;
    padding-bottom:10000px;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;overflow:hidden;    ‘隐藏溢出。如果内容溢出wrap层，则不显示。&lt;/p&gt;

&lt;p&gt;margin-bottom:-10000px;	‘底部边距-10000px。 &lt;br /&gt;
padding-bottom:10000px;	‘底部填充10000px。 &lt;br /&gt;
上面这两句能够实现的效果就是，产生10000px的填充，然后用负的边距把它给抵销掉。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;去除inline-block元素间间距&quot;&gt;去除inline-block元素间间距&lt;/h3&gt;

&lt;p&gt;一开始我不知道是因为使用了 &lt;code class=&quot;highlighter-rouge&quot;&gt;display: inline-block&lt;/code&gt; 会有间距。后来查找资料找到了相关的方案。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.zhangxinxu.com/wordpress/2012/04/inline-block-space-remove-%E5%8E%BB%E9%99%A4%E9%97%B4%E8%B7%9D/&quot;&gt;去除inline-block元素间间距的N种方法&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://css-tricks.com/fighting-the-space-between-inline-block-elements/&quot;&gt;Fighting the Space Between Inline Block Elements&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;真正意义上的inline-block水平呈现的元素间，换行显示或空格分隔的情况下会有间距。 &lt;br /&gt;
这种表现是符合规范的应该有的表现。&lt;/p&gt;

&lt;p&gt;解决方法有很多，上述博文中提到的有：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;移除空格&lt;/li&gt;
  &lt;li&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;margin&lt;/code&gt; 负值&lt;/li&gt;
  &lt;li&gt;取消闭合标签&lt;/li&gt;
  &lt;li&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;font-size: 0&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;letter-spacing&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;word-spacing&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;其他&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我觉得使用 4 &lt;code class=&quot;highlighter-rouge&quot;&gt;font-size: 0&lt;/code&gt; 比较好，对别的元素影响最小。代码如下：在 &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; 的外层将字体尺寸设为 0，载对内层的 &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; 重新设置字体大小，即可。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nav {
    font-size: 0;
}
nav a {
    font-size: 16px;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;最终作品&quot;&gt;最终作品&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://gaohaoyang.github.io/ife/task/task0001/work/Gaohaoyang/index.html&quot;&gt;在线Demo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Gaohaoyang/ife/tree/master/task/task0001/work/Gaohaoyang&quot;&gt;源代码&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ecomfe/spec&quot;&gt;HTML、CSS的代码规范&lt;/a&gt; 自己要试着改变一些代码风格了，规范化！&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.zhihu.com/question/20455165&quot;&gt;顾轶灵:Web语义化&lt;/a&gt; &lt;br /&gt;
我看他回答最后的举例的Sildes做的非常好，可以经常看看。&lt;a href=&quot;http://justineo.github.io/slideshows/semantic-html/&quot;&gt;Semantic HTML&lt;/a&gt;。他的其他Slides也做的非常好，很喜欢这种风格！&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.w3cfuns.com/blog-5445898-5398950.html&quot;&gt;CSS命名规范@W3C Funs&lt;/a&gt; 起名不再困难！&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;点击阅读: CSS浏览器兼容性列表&quot;&gt;点击阅读: CSS浏览器兼容性列表-维基百科&lt;/a&gt; 类似的我想到了 &lt;a href=&quot;http://caniuse.com/&quot;&gt;Can I Use&lt;/a&gt;，Can I Use 包含的更多，包括 HTML5, CSS SVG, JS API 等。&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://zh.learnlayout.com/&quot;&gt;学习CSS布局&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://mediaqueri.es/&quot;&gt;Media Queries&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Using_CSS_gradients&quot;&gt;使用CSS渐变&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.w3cplus.com/content/css3-gradient&quot;&gt;CSS3 Gradient&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.colorzilla.com/gradient-editor/&quot;&gt;CSS渐变生成器&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Wed, 15 Apr 2015 12:06:05 -0700</pubDate>
        <link>/2015/04/15/baidu-ife-1/</link>
        <guid isPermaLink="true">/2015/04/15/baidu-ife-1/</guid>
        
        
        <category>Front-end</category>
        
        <category>HTML</category>
        
        <category>CSS</category>
        
      </item>
    
      <item>
        <title>同步一个 fork</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#如何使用搜索引擎&quot; id=&quot;markdown-toc-如何使用搜索引擎&quot;&gt;如何使用搜索引擎&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#具体方法&quot; id=&quot;markdown-toc-具体方法&quot;&gt;具体方法&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#configuring-a-remote-for-a-fork&quot; id=&quot;markdown-toc-configuring-a-remote-for-a-fork&quot;&gt;Configuring a remote for a fork&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#syncing-a-fork&quot; id=&quot;markdown-toc-syncing-a-fork&quot;&gt;Syncing a fork&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;如何使用搜索引擎&quot;&gt;如何使用搜索引擎&lt;/h2&gt;

&lt;p&gt;其实这个问题并不难，我又被坑了。百度搜的东西不靠谱啊，以后这种问题一定要用&lt;strong&gt;英文&lt;/strong&gt;在 &lt;a href=&quot;http://www.google.com&quot;&gt;Google&lt;/a&gt; 或者 &lt;a href=&quot;http://cn.bing.com/&quot;&gt;Bing&lt;/a&gt; 上搜索，这样才能搜到原汁原味的答案。就当是一个教训吧。&lt;/p&gt;

&lt;p&gt;搜索 fork sync，就可以看到 GitHub 自己的帮助文档 &lt;a href=&quot;https://help.github.com/articles/syncing-a-fork/&quot;&gt;Syncing a fork&lt;/a&gt; 点进去看这篇的时候，注意到有一个 Tip: Before you can sync your fork with an upstream repository, you must &lt;a href=&quot;https://help.github.com/articles/configuring-a-remote-for-a-fork/&quot;&gt;configure a remote that points to the upstream repository&lt;/a&gt; in Git.  &lt;br /&gt;
根据这两篇文章，问题迎刃而解！&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;具体方法&quot;&gt;具体方法&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;configuring-a-remote-for-a-fork&quot;&gt;Configuring a remote for a fork&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;给 fork 配置一个 remote&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;主要使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;git remote -v&lt;/code&gt; 查看远程状态。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;git remote -v
# origin  https://github.com/YOUR_USERNAME/YOUR_FORK.git (fetch)
# origin  https://github.com/YOUR_USERNAME/YOUR_FORK.git (push)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;添加一个将被同步给 fork 远程的上游仓库&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;git remote add upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;再次查看状态确认是否配置成功。&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;git remote -v
# origin    https://github.com/YOUR_USERNAME/YOUR_FORK.git (fetch)
# origin    https://github.com/YOUR_USERNAME/YOUR_FORK.git (push)
# upstream  https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git (fetch)
# upstream  https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git (push)
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;syncing-a-fork&quot;&gt;Syncing a fork&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;从上游仓库 fetch 分支和提交点，传送到本地，并会被存储在一个本地分支 upstream/master &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;git fetch upstream&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;git fetch upstream
# remote: Counting objects: 75, done.
# remote: Compressing objects: 100% (53/53), done.
# remote: Total 62 (delta 27), reused 44 (delta 9)
# Unpacking objects: 100% (62/62), done.
# From https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY
#  * [new branch]      master     -&amp;gt; upstream/master
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;切换到本地主分支(如果不在的话)  &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout master&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;git checkout master
# Switched to branch &#39;master&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;把 upstream/master 分支合并到本地 master 上，这样就完成了同步，并且不会丢掉本地修改的内容。  &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;git merge upstream/master&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;git merge upstream/master
# Updating a422352..5fdff0f
# Fast-forward
#  README                    |    9 -------
#  README.md                 |    7 ++++++
#  2 files changed, 7 insertions(+), 9 deletions(-)
#  delete mode 100644 README
#  create mode 100644 README.md
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;如果想更新到 GitHub 的 fork 上，直接 &lt;code class=&quot;highlighter-rouge&quot;&gt;git push origin master&lt;/code&gt; 就好了。&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 12 Apr 2015 08:14:54 -0700</pubDate>
        <link>/2015/04/12/Syncing-a-fork/</link>
        <guid isPermaLink="true">/2015/04/12/Syncing-a-fork/</guid>
        
        
        <category>GitHub</category>
        
      </item>
    
      <item>
        <title>判断两个数组是否相似 (arraysSimilar)</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#题目&quot; id=&quot;markdown-toc-题目&quot;&gt;题目&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#解答&quot; id=&quot;markdown-toc-解答&quot;&gt;解答&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#思路&quot; id=&quot;markdown-toc-思路&quot;&gt;思路&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#具体实现代码&quot; id=&quot;markdown-toc-具体实现代码&quot;&gt;具体实现代码&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#总结&quot; id=&quot;markdown-toc-总结&quot;&gt;总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;题目&quot;&gt;题目&lt;/h2&gt;

&lt;p&gt;题目来自 &lt;a href=&quot;http://imooc.com/code/5760&quot;&gt;慕课网 JavaScript 深入浅出 1-6 编程练习&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;请在 index.html 文件中，编写 arraysSimilar 函数，实现判断传入的两个数组是否相似。具体需求：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;数组中的成员类型相同，顺序可以不同。例如 [1, true] 与 [false, 2] 是相似的。&lt;/li&gt;
  &lt;li&gt;数组的长度一致。&lt;/li&gt;
  &lt;li&gt;类型的判断范围，需要区分: String, Boolean, Number, undefined, null, 函数, 日期, window.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;当以上全部满足，则返回&lt;strong&gt;“判定结果:通过”&lt;/strong&gt;，否则返回&lt;strong&gt;“判定结果:不通过”&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;题目给出了 index.html 如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE HTML&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;http-equiv=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/html; charset=gb18030&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Untitled Document&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;   
        &lt;span class=&quot;cm&quot;&gt;/*
         * param1 Array 
         * param2 Array
         * return true or false
         */&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arraysSimilar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;testData.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其中 testData.js 是测试用例，代码如下&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var result = function() {
    //以下为多组测试数据
    var cases = [{
        arr1: [1, true, null],
        arr2: [null, false, 100],
        expect: true
    }, {
        arr1: [
            function() {},
            100
        ],
        arr2: [100, {}],
        expect: false
    }, {
        arr1: [null, 999],
        arr2: [{},
            444
        ],
        expect: false
    }, {
        arr1: [window, 1, true, new Date(), &quot;hahaha&quot;, (function() {}), undefined],
        arr2: [undefined, (function() {}), &quot;okokok&quot;, new Date(), false, 2, window],
        expect: true
    }, {
        arr1: [new Date()],
        arr2: [{}],
        expect: false
    }, {
        arr1: [window],
        arr2: [{}],
        expect: false
    }, {
        arr1: [undefined, 1],
        arr2: [null, 2],
        expect: false
    }, {
        arr1: [new Object, new Object, new Object],
        arr2: [{}, {},
            null
        ],
        expect: false
    }, {
        arr1: null,
        arr2: null,
        expect: false
    }, {
        arr1: [],
        arr2: undefined,
        expect: false
    }, {
        arr1: &quot;abc&quot;,
        arr2: &quot;cba&quot;,
        expect: false
    }];

    //使用for循环, 通过arraysSimilar函数验证以上数据是否相似，如相似显示“通过”,否则&quot;不通过&quot;,所以大家要完成arraysSimilar函数,具体要求，详见任务要求。    
    for (var i = 0; i &amp;lt; cases.length; i++) {
        if (arraysSimilar(cases[i].arr1, cases[i].arr2) !== cases[i].expect) {
            document.write(&quot;不通过！case&quot; + (i + 1) + &quot;不正确！arr1=&quot; + JSON.stringify(cases[i].arr1) + &quot;, arr2=&quot; + JSON.stringify(cases[i].arr2) + &quot; 的判断结果不是&quot; + cases[i].expect);
            return false;
        }
    }
    return true;

}();
document.write(&quot;判定结果:&quot; + (result ? &quot;通过&quot; : &quot;不通过&quot;));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;解答&quot;&gt;解答&lt;/h2&gt;

&lt;p&gt;各位读者在看解答前也可以自己考虑一下，看看咱们的想法是否一致，期待您在本文的留言。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;思路&quot;&gt;思路&lt;/h3&gt;

&lt;p&gt;通过观察测试用例，可以发现，最后三个用例有不是数组的。所以我们可以先判断传入的参数是否是数组。 &lt;br /&gt;
又因为题目中要求数组长度必须一致，这也是第二个限制条件。 &lt;br /&gt;
最后再区分具体的类型。&lt;/p&gt;

&lt;p&gt;理清思路我们可以分为以下步骤：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;判断传入的参数是否为数组 (使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;instanceof&lt;/code&gt; 方法)&lt;/li&gt;
  &lt;li&gt;检查两个数组长度是否一致&lt;/li&gt;
  &lt;li&gt;分别判断数组内元素的基本数据类型 (使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;typeof&lt;/code&gt; 方法)&lt;/li&gt;
  &lt;li&gt;因为 &lt;code class=&quot;highlighter-rouge&quot;&gt;typeof&lt;/code&gt; 只能检查基本数据类型，对于 &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Date&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;window&lt;/code&gt; 返回的都是 &lt;code class=&quot;highlighter-rouge&quot;&gt;object&lt;/code&gt;，所以使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.prototype.toString.apply()&lt;/code&gt; 来检查这些对象类型，其返回值为：&lt;code class=&quot;highlighter-rouge&quot;&gt;&#39;[object Null]&#39;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&#39;[object Date]&#39;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&#39;[object global]&#39;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;分别比较每个数组内元素的各种类型的个数，如果都相等，那么这两个数组是相似的。&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;具体实现代码&quot;&gt;具体实现代码&lt;/h3&gt;

&lt;p&gt;JavaScript代码如下&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 * =====================================================
 * 请在index.html文件中，编写arraysSimilar函数，实现判断传入的两个数组是否相似。具体需求：
 * 1. 数组中的成员类型相同，顺序可以不同。例如[1, true] 与 [false, 2]是相似的。
 * 2. 数组的长度一致。
 * 3. 类型的判断范围，需要区分:String, Boolean, Number, undefined, null, 函数，日期, window.
 *
 * 当以上全部满足，则返回&quot;判定结果:通过&quot;，否则返回&quot;判定结果:不通过&quot;。
 * ===================================================== 
 */

/*
* param1 Array
* param2 Array
* return true or false
*/
function arraysSimilar(arr1, arr2){
	if (arr1 instanceof Array &amp;amp;&amp;amp; arr2 instanceof Array ) {	//先判断传入的是否是数组
		if (arr1.length == arr2.length) {					//判断数组长度
			console.log(&quot;same-length&quot;);
			console.log(arr1);
			console.log(arr2);
			//开始判断数组内部是否相似
			return sameLengthArraysSimilar(arr1, arr2);
		} else{
			//两个数组长度不同返回false
			return false;
		}
	} else {
		//传入的参数不是数组返回false
		return false;
	}
}

/**
 * 判断两个等长的数组内部是否相似
 * 遍历数组
 * arr1中元素各种类型出现的个数是否和arr2中元素各种类型出现的个数相同
 * @param  {Array} arr1 数组1
 * @param  {Array} arr2 数组2
 * @return {true,false}
 */
function sameLengthArraysSimilar(arr1,arr2) {
	var numInArr1 = 0;
	var numInArr2 = 0;
	var booleanInArr1 = 0;
	var booleanInArr2 = 0;
	var funInArr1 = 0;
	var funInArr2 = 0;
	var undefinedInArr1 = 0;
	var undefinedInArr2 = 0;
	var stringInArr1 = 0;
	var stringInArr2 = 0;
	var nullInArr1 = 0;
	var nullInArr2 = 0;
	var dateInArr1 = 0;
	var dateInArr2 = 0;
	var windowInArr1 = 0;
	var windowInArr2 = 0;

	for (var i = 0; i &amp;lt; arr1.length; i++) {
		if(typeof arr1[i] === &#39;number&#39; ){
			numInArr1 ++;
		} else if(typeof arr1[i] === &#39;boolean&#39;){
			booleanInArr1 ++;
		} else if(typeof arr1[i] === &#39;function&#39;){
			funInArr1 ++;
		} else if(typeof arr1[i] === &#39;undefined&#39;){
			undefinedInArr1 ++;
		} else if(typeof arr1[i] === &#39;string&#39;){
			stringInArr1 ++;
		} else if(typeof arr1[i] ===&#39;object&#39;){
			if(Object.prototype.toString.apply(arr1[i]) === &#39;[object Null]&#39;){
				nullInArr1 ++;
			} else if(Object.prototype.toString.apply(arr1[i]) === &#39;[object Date]&#39;){
				dateInArr1 ++;
			} else if(Object.prototype.toString.apply(arr1[i]) === &#39;[object global]&#39;){
				windowInArr1 ++;
			}
		}

		if(typeof arr2[i] === &#39;number&#39;){
			numInArr2 ++;
		} else if(typeof arr2[i] === &#39;boolean&#39;){
			booleanInArr2 ++;
		} else if(typeof arr2[i] === &#39;function&#39;){
			funInArr2 ++;
		} else if(typeof arr2[i] === &#39;undefined&#39;){
			undefinedInArr2 ++;
		} else if(typeof arr2[i] === &#39;string&#39;){
			stringInArr2 ++;
		} else if(typeof arr2[i] ===&#39;object&#39;){
			if(Object.prototype.toString.apply(arr2[i]) === &#39;[object Null]&#39;){
				nullInArr2 ++;
			} else if(Object.prototype.toString.apply(arr2[i]) === &#39;[object Date]&#39;){
				dateInArr2 ++;
			} else if(Object.prototype.toString.apply(arr2[i]) === &#39;[object global]&#39;){
				windowInArr2 ++;
			}
		}
	}

	console.log(&quot;num---&quot;+numInArr1);
	console.log(&quot;num---&quot;+numInArr2);
	console.log(&quot;boo---&quot;+booleanInArr1);
	console.log(&quot;boo---&quot;+booleanInArr2);
	console.log(&quot;null---&quot;+nullInArr1);
	console.log(&quot;null---&quot;+nullInArr2);
	console.log(&quot;window---&quot;+windowInArr1);
	console.log(&quot;window---&quot;+windowInArr2);
	console.log(&quot;date---&quot;+dateInArr1);
	console.log(&quot;date---&quot;+dateInArr2);
	console.log(&quot;string---&quot;+stringInArr1);
	console.log(&quot;string---&quot;+stringInArr2);
	console.log(&quot;fun---&quot;+funInArr1);
	console.log(&quot;fun---&quot;+funInArr2);
	console.log(&quot;undefined---&quot;+undefinedInArr1);
	console.log(&quot;undefined---&quot;+undefinedInArr2);

	if(numInArr1 == numInArr2 &amp;amp;&amp;amp; booleanInArr1==booleanInArr2 &amp;amp;&amp;amp; funInArr1==funInArr2 &amp;amp;&amp;amp; undefinedInArr1==undefinedInArr2 &amp;amp;&amp;amp; stringInArr1==stringInArr2 &amp;amp;&amp;amp; nullInArr1==nullInArr2 &amp;amp;&amp;amp; dateInArr1==dateInArr2 &amp;amp;&amp;amp; windowInArr1==windowInArr2){
		console.log(&#39;================================true&#39;);
		return true;
	}else{
		console.log(&#39;================================false&#39;);
		return false;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;上述代码完美的跑完所有的测试用例，读者 &lt;a href=&quot;http://gaohaoyang.github.io/javascript-test/arraysSimilar/&quot;&gt;点击这里查看结果&lt;/a&gt;，并且可以按 &lt;code class=&quot;highlighter-rouge&quot;&gt;f12&lt;/code&gt; 看 Console 信息， 里面有代码的执行过程。&lt;/li&gt;
  &lt;li&gt;当然你也可以复制本文的 JavaScript 代码，在 &lt;a href=&quot;http://imooc.com/code/5760&quot;&gt;慕课网的习题&lt;/a&gt; 下跑一下，也可以看到 &lt;code class=&quot;highlighter-rouge&quot;&gt;判定结果:通过&lt;/code&gt; 的结果&lt;/li&gt;
  &lt;li&gt;完整源代码在我的 GitHub &lt;a href=&quot;https://github.com/Gaohaoyang/javascript-test/tree/master/arraysSimilar&quot;&gt;javascript-test/arraysSimilar/&lt;/a&gt; 仓库中&lt;/li&gt;
  &lt;li&gt;其实我的代码逻辑并不复杂，有点&lt;strong&gt;空间换时间&lt;/strong&gt;的感觉，执行效率应该是较高的。没有用 JavaScript 封装的任何函数，完全是自己写的。其实代码除去 &lt;code class=&quot;highlighter-rouge&quot;&gt;console.log()&lt;/code&gt; 也并没有多少行。&lt;/li&gt;
  &lt;li&gt;各位读者有什么好的想法欢迎留言交流！&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 06 Apr 2015 08:14:54 -0700</pubDate>
        <link>/2015/04/06/arrays-similar/</link>
        <guid isPermaLink="true">/2015/04/06/arrays-similar/</guid>
        
        
        <category>JavaScript</category>
        
      </item>
    
      <item>
        <title>代码校验工具 SublimeLinter 的安装与使用</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#序&quot; id=&quot;markdown-toc-序&quot;&gt;序&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#安装-sublimelinter&quot; id=&quot;markdown-toc-安装-sublimelinter&quot;&gt;安装 SublimeLinter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#javascript-语法检查&quot; id=&quot;markdown-toc-javascript-语法检查&quot;&gt;JavaScript 语法检查&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#安装-sublimelinter-jshint&quot; id=&quot;markdown-toc-安装-sublimelinter-jshint&quot;&gt;安装 SublimeLinter-jshint&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#安装-nodejs-和-jshint&quot; id=&quot;markdown-toc-安装-nodejs-和-jshint&quot;&gt;安装 nodeJS 和 jshint&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#css-语法检查&quot; id=&quot;markdown-toc-css-语法检查&quot;&gt;css 语法检查&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#安装-sublimelinter-csslint&quot; id=&quot;markdown-toc-安装-sublimelinter-csslint&quot;&gt;安装 SublimeLinter-csslint&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#在-nodejs-下安装-csslint&quot; id=&quot;markdown-toc-在-nodejs-下安装-csslint&quot;&gt;在 nodeJS 下安装 csslint&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;序&quot;&gt;序&lt;/h2&gt;

&lt;p&gt;本文我将讲述一下 SublimeLinter 的安装过程。 &lt;br /&gt;
其组件 jshint 的安装与使用。 &lt;br /&gt;
其组件 csslint 的安装与使用。 &lt;br /&gt;
我将基于 &lt;a href=&quot;http://sublimetext.com/3&quot;&gt;Sublime Text 3&lt;/a&gt; 来安装。 &lt;br /&gt;
使用 Sublime Text 2 的用户阅读本文是没有帮助的。&lt;/p&gt;

&lt;p&gt;SublimeLinter 是 Sublime 的插件，它的作用是检查代码语法是否有错误，并提示。习惯了 IDE 下写代码的人一定需要一款在 Sublime 上类似的语法检查工具。下面我们开始。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;安装-sublimelinter&quot;&gt;安装 SublimeLinter&lt;/h2&gt;

&lt;p&gt;如同其他插件一样使用 Package Control 来安装。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;按下 &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl+Shift+p&lt;/code&gt; 进入 Command Palette&lt;/li&gt;
  &lt;li&gt;输入&lt;code class=&quot;highlighter-rouge&quot;&gt;install&lt;/code&gt;进入 Package Control: Install Package&lt;/li&gt;
  &lt;li&gt;输入&lt;code class=&quot;highlighter-rouge&quot;&gt;SublimeLinter&lt;/code&gt;。进行安装.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://7q5cdt.com1.z0.glb.clouddn.com/SublimeLinter-sublimeLinter.jpg&quot; alt=&quot;SublimeLinter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;安装完成后可以看到这样一段话：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;markdown&quot;&gt;Welcome to SublimeLinter, a linter framework for Sublime Text 3.
 
                  * * * IMPORTANT! * * *

         SublimeLinter 3 is NOT a drop-in replacement for
        earlier versions.

         Linters *NOT* included with SublimeLinter 3, 
         they must be installed separately.
 
         The settings are different.
 
                 * * * READ THE DOCS! * * *
 
 Otherwise you will never know how to install linters, nor will
 you know about all of the great new features in SublimeLinter 3.
 
 For complete documentation on how to install and use SublimeLinter,
 please see:
 
 http://www.sublimelinter.com&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到具体的 Linters 组件&lt;strong&gt;不&lt;/strong&gt;被包含在 SublimeLinter 3 中，所以我们要额外独立安装组件。 &lt;br /&gt;
可以针对不同的语言安装不同的组件。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;javascript-语法检查&quot;&gt;JavaScript 语法检查&lt;/h2&gt;

&lt;p&gt;SublimeLinter-jshint 是基于 nodeJS 下的 jshint 的插件，实际上 SublimeLinter-jshint 调用了 nodeJS 中 jshint 的接口来进行语法检查的。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;安装-sublimelinter-jshint&quot;&gt;安装 SublimeLinter-jshint&lt;/h3&gt;

&lt;p&gt;为了让 JavaScript 代码有语法检查，我们安装 SublimeLinter-jshint &lt;br /&gt;
同样的方法，我们安装 SublimeLinter-jshint&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;按下 &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl+Shift+p&lt;/code&gt; 进入 Command Palette&lt;/li&gt;
  &lt;li&gt;输入&lt;code class=&quot;highlighter-rouge&quot;&gt;install&lt;/code&gt;进入 Package Control: Install Package&lt;/li&gt;
  &lt;li&gt;输入&lt;code class=&quot;highlighter-rouge&quot;&gt;SublimeLinter-jshint&lt;/code&gt;。进行安装.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如下图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7q5cdt.com1.z0.glb.clouddn.com/SublimeLinter-jshint.jpg&quot; alt=&quot;SublimeLinter-jshint&quot; /&gt;&lt;/p&gt;

&lt;p&gt;安装完成后我们可以看到下面的一段话&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;markdown&quot;&gt;SublimeLinter-jshint
  -------------------------------
  This linter plugin for SublimeLinter provides an interface to jshint.
  
  ** IMPORTANT! **
  
  Before this plugin will activate, you *must*
  follow the installation instructions here:
  
  https://github.com/SublimeLinter/SublimeLinter-jshint
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;安装-nodejs-和-jshint&quot;&gt;安装 nodeJS 和 jshint&lt;/h3&gt;

&lt;p&gt;在插件开始工作之前，我们必须再看一下上述插件的&lt;a href=&quot;https://github.com/SublimeLinter/SublimeLinter-jshint&quot;&gt;安装说明&lt;/a&gt; &lt;br /&gt;
通过 &lt;a href=&quot;https://github.com/SublimeLinter/SublimeLinter-jshint&quot;&gt;SublimeLinter-jshint 的说明&lt;/a&gt; 我们可以看到，这个组件依赖于 nodeJS 下的 jshint，所以我们安装 nodeJS 环境和 nodeJS 下的 jshint。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;安装 &lt;a href=&quot;https://nodejs.org/&quot;&gt;Node.js&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;通过 npm 安装&lt;code class=&quot;highlighter-rouge&quot;&gt;jshint&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在命令行下输入如下代码，完成安装&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install -g jshint
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;安装完成后命令行中出现如下的信息&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\Users\Administrator\AppData\Roaming\npm\jshint -&amp;gt; C:\Users\Administrator\AppData\Roaming\npm\node_modules\jshint\bin\jshint
jshint@2.6.3 C:\Users\Administrator\AppData\Roaming\npm\node_modules\jshint
├── strip-json-comments@1.0.2
├── underscore@1.6.0
├── exit@0.1.2
├── shelljs@0.3.0
├── console-browserify@1.1.0 (date-now@0.1.4)
├── htmlparser2@3.8.2 (domelementtype@1.3.0, entities@1.0.0, domhandler@2.3.0, readable-stream@1.1.13, domutils@1.5.1)
├── minimatch@1.0.0 (sigmund@1.0.0, lru-cache@2.5.0)
└── cli@0.6.6 (glob@3.2.11)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以查看 jshint 版本，已确认安装完成。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\Users\Administrator&amp;gt;jshint -v
jshint v2.6.3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;现在，恭喜你，我们使用 Sublime 编辑 JavaScript 文件，就会有语法检查了！&lt;/p&gt;

&lt;p&gt;在编辑过程中，会有如下提示&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7q5cdt.com1.z0.glb.clouddn.com/SublimeLinter-jshint-test.jpg&quot; alt=&quot;SublimeLinter-jshint-test&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击提示点后，Sublime 状态栏也会有相应的说明&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7q5cdt.com1.z0.glb.clouddn.com/SublimeLinter-jshint-test2.jpg&quot; alt=&quot;SublimeLinter-jshint-test2&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;css-语法检查&quot;&gt;css 语法检查&lt;/h2&gt;

&lt;p&gt;与 jshint 同理，SublimeLinter-csslint 也是基于 nodeJS 下的 csslint 的插件，实际上 SublimeLinter-csslint 调用了 nodeJS 中 csslint 的接口来进行语法检查的。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;安装-sublimelinter-csslint&quot;&gt;安装 SublimeLinter-csslint&lt;/h3&gt;

&lt;p&gt;同样的方法。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;按下 &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl+Shift+p&lt;/code&gt; 进入 Command Palette&lt;/li&gt;
  &lt;li&gt;输入&lt;code class=&quot;highlighter-rouge&quot;&gt;install&lt;/code&gt;进入 Package Control: Install Package&lt;/li&gt;
  &lt;li&gt;输入&lt;code class=&quot;highlighter-rouge&quot;&gt;SublimeLinter-csslint&lt;/code&gt;。进行安装.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如下图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7q5cdt.com1.z0.glb.clouddn.com/SublimeLinter-csslint.jpg&quot; alt=&quot;SublimeLinter-csslint&quot; /&gt;&lt;/p&gt;

&lt;p&gt;安装完成后我们可以看到下面的一段话&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SublimeLinter-csslint
-------------------------------
This linter plugin for SublimeLinter provides an interface to csslint.

** IMPORTANT! **

Before this plugin will activate, you *must*
follow the installation instructions here:

https://github.com/SublimeLinter/SublimeLinter-csslint
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在使用插件之前，必须遵循上述网址中的&lt;a href=&quot;https://github.com/SublimeLinter/SublimeLinter-csslint&quot;&gt;安装说明&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;在-nodejs-下安装-csslint&quot;&gt;在 nodeJS 下安装 csslint&lt;/h3&gt;

&lt;p&gt;进入上述的 GitHub 地址，csslint 的说明页。我们知道了和 jshint 一样，csslint 也是基于 nodeJS 下的 csslint 来使用的。&lt;/p&gt;

&lt;p&gt;这里安装 nodeJS 过程省略。 &lt;br /&gt;
只需用 npm 安装 csslint 即可。&lt;/p&gt;

&lt;p&gt;在命令行中输入&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install -g csslint   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;安装完成后命令行中出现如下的信息&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\Users\Administrator\AppData\Roaming\npm\csslint -&amp;gt; C:\Users\Administrator\AppData\Roaming\npm\node_modules\csslint\cli.js
csslint@0.10.0 C:\Users\Administrator\AppData\Roaming\npm\node_modules\csslint
└── parserlib@0.2.5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以查看 csslint 版本，已确认安装完成。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\Users\Administrator&amp;gt;csslint --version
v0.10.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;现在，恭喜你，我们使用 Sublime 编辑 css 文件，就会有语法检查了！&lt;/p&gt;

&lt;p&gt;在编辑过程中，会有如下提示&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7q5cdt.com1.z0.glb.clouddn.com/SublimeLinter-csslint-test.jpg&quot; alt=&quot;SublimeLinter-csslint-test&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击提示点后，Sublime 状态栏也会有相应的说明&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7q5cdt.com1.z0.glb.clouddn.com/SublimeLinter-csslint-test2.jpg&quot; alt=&quot;SublimeLinter-csslint-test2&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 26 Mar 2015 08:14:54 -0700</pubDate>
        <link>/2015/03/26/sublimeLinter/</link>
        <guid isPermaLink="true">/2015/03/26/sublimeLinter/</guid>
        
        
        <category>Sublime</category>
        
      </item>
    
      <item>
        <title>Teach Girlfriend to make a Web Pages like Zhihu</title>
        <description>
&lt;p&gt;My girlfriend is learning html and css recently. I told her to follow the video. Here, I recommend a video in Chinese that suite for new learners. The name of course is Getting HTML web pages dev in 8 hours ( 8小时学会HTML网页开发 ) . I watched this video at very first time. The teacher named Eighteen Swallows ( 燕十八 ) . He teached very clear even himself being on screen to show what is float or box-model.  &lt;br /&gt;
&lt;!-- ![燕十八](http://7q5cdt.com1.z0.glb.clouddn.com/teach-girlfriend-html-18swallows.png) --&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Here is the site of the free online video. &lt;br /&gt;
&lt;a href=&quot;http://study.163.com/course/courseMain.htm?courseId=432008&quot;&gt;http://study.163.com/course/courseMain.htm?courseId=432008&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;I did the detailed note about this course. You can read here: &lt;br /&gt;
&lt;a href=&quot;http://wenku.baidu.com/view/aa136099f90f76c660371a35&quot;&gt;http://wenku.baidu.com/view/aa136099f90f76c660371a35&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Now I’ll tell something happend today. She has watched the video above, and knows a little on BootStrap. So she wants to do some pages with BootStrap.&lt;/p&gt;

&lt;p&gt;We determined to copy the pages on &lt;a href=&quot;http://zhihu.com&quot;&gt;Zhihu&lt;/a&gt; &lt;br /&gt;
Like this: &lt;br /&gt;
&lt;img src=&quot;http://7q5cdt.com1.z0.glb.clouddn.com/teach-girlfriend-html-zhihu.jpg&quot; alt=&quot;知乎zhihu&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I teached her &lt;a href=&quot;http://www.bootcss.com/&quot;&gt;Boostrap&lt;/a&gt; this afternoon. She has already got to read the docs and can code simple statics pages.&lt;/p&gt;

&lt;p&gt;She seems to like Web Pages Design. Though she used to be a Graphic Designer. And now, she really works hard.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;At last I’ll show the works that we did together in 2 hours. It’s unfinished. I guess she will do it later. It’s a nice weekend, isn’t it?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://gaohaoyang.github.io/works/bootstrap-zhihu/&quot;&gt;&lt;em&gt;to see Copy Zhihu, click here&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;screenshot of copy Zhihu
&lt;img src=&quot;http://7q5cdt.com1.z0.glb.clouddn.com/teach-girlfriend-html-CopyZhihu.jpg&quot; alt=&quot;Copy Zhihu&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 21 Mar 2015 08:14:54 -0700</pubDate>
        <link>/2015/03/21/teach-girlfriend-html-css/</link>
        <guid isPermaLink="true">/2015/03/21/teach-girlfriend-html-css/</guid>
        
        
        <category>Bootstrap</category>
        
      </item>
    
      <item>
        <title>Jekyll 搭建静态博客</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#序&quot; id=&quot;markdown-toc-序&quot;&gt;序&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#搭建过程&quot; id=&quot;markdown-toc-搭建过程&quot;&gt;搭建过程&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#安装ruby&quot; id=&quot;markdown-toc-安装ruby&quot;&gt;安装Ruby&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#安装rubygems&quot; id=&quot;markdown-toc-安装rubygems&quot;&gt;安装RubyGems&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#用rubygems安装jekyll&quot; id=&quot;markdown-toc-用rubygems安装jekyll&quot;&gt;用RubyGems安装Jekyll&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#创建博客&quot; id=&quot;markdown-toc-创建博客&quot;&gt;创建博客&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#可能出现的问题&quot; id=&quot;markdown-toc-可能出现的问题&quot;&gt;可能出现的问题&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#hitimeshitimes-loaderror&quot; id=&quot;markdown-toc-hitimeshitimes-loaderror&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;hitimes/hitimes (LoadError)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;序&quot;&gt;序&lt;/h2&gt;

&lt;p&gt;一直以来都想搭建一个自己的博客，但是近半年做项目太忙，再加上教研室的网络很坑爹，所以也一直没顾得上。之前用过 WordPress 托管在免费的京东云擎上，但是速度太慢。在知乎上看到一些相关的内容，于是选择了在github上用jekyll搭建博客。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;搭建过程&quot;&gt;搭建过程&lt;/h2&gt;

&lt;p&gt;在jekyll的官网上 &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;http://jekyllrb.com/&lt;/a&gt; 其实已经说得比较明白了，我在这里还是简单的说一下吧。我用的是Windows系统。  &lt;br /&gt;
主要环节有：安装Ruby，安装RubyGems，安装jekyll，安装代码高亮插件，安装node.js&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;安装ruby&quot;&gt;安装Ruby&lt;/h3&gt;

&lt;p&gt;ruby官网下载安装：&lt;a href=&quot;https://www.ruby-lang.org/en/downloads/&quot;&gt;https://www.ruby-lang.org/en/downloads/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;安装完成后配置环境变量&lt;/p&gt;

&lt;p&gt;在命令提示符中，得到ruby版本号，如下图，即安装成功
&lt;img src=&quot;/css/pics/ruby-v.png&quot; alt=&quot;ruby-v&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;安装rubygems&quot;&gt;安装RubyGems&lt;/h3&gt;

&lt;p&gt;官网下载 &lt;a href=&quot;http://rubygems.org/pages/download&quot;&gt;http://rubygems.org/pages/download&lt;/a&gt; rubygems-2.4.5.zip&lt;/p&gt;

&lt;p&gt;cd到RubyGems目录&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/css/pics/ruby-gems.png&quot; alt=&quot;ruby-gems&quot; /&gt;&lt;/p&gt;

&lt;p&gt;执行安装&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/css/pics/ruby-gems-setup.png&quot; alt=&quot;ruby-gems-setup&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;用rubygems安装jekyll&quot;&gt;用RubyGems安装Jekyll&lt;/h3&gt;

&lt;p&gt;执行下面的语句安装&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/css/pics/jekyll-setup.png&quot; alt=&quot;jekyll-setup&quot; /&gt;&lt;/p&gt;

&lt;p&gt;安装结束画面&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/css/pics/jekyll-setup-finish.png&quot; alt=&quot;jekyll-setup-finish&quot; /&gt;&lt;/p&gt;

&lt;p&gt;至此jekyll就已经安装完毕了，后续就是个性化的自己设定了。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;创建博客&quot;&gt;创建博客&lt;/h3&gt;

&lt;p&gt;在d盘新建一个工作区jekyllWorkspace&lt;/p&gt;

&lt;p&gt;cd到jekyllWorkspace&lt;/p&gt;

&lt;p&gt;执行jekyll new name创建新的工作区&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/css/pics/jekyllWorkSpace.png&quot; alt=&quot;jekyllWorkSpace&quot; /&gt;&lt;/p&gt;

&lt;p&gt;文件结构如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/css/pics/jekyllFiles.png&quot; alt=&quot;jekyllFiles&quot; /&gt;&lt;/p&gt;

&lt;p&gt;cd到博客文件夹，开启服务器&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/css/pics/serve.png&quot; alt=&quot;serve&quot; /&gt;&lt;/p&gt;

&lt;p&gt;watch为了检测文件夹内的变化，即修改后不需要重新启动jekyll&lt;/p&gt;

&lt;p&gt;我的环境下启动报错(你的可能没有)，再安装yajl-ruby和rouge&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/css/pics/yajl.png&quot; alt=&quot;yajl&quot; /&gt;&lt;/p&gt;

&lt;p&gt;再次启动服务器成功&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/css/pics/serve-sucess.png&quot; alt=&quot;serve-sucess&quot; /&gt;&lt;/p&gt;

&lt;p&gt;访问 http://localhost:4000/&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/css/pics/browser.png&quot; alt=&quot;browser&quot; /&gt;&lt;/p&gt;

&lt;p&gt;详细文章页面&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/css/pics/browser2.png&quot; alt=&quot;browser2&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;##后续&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;整个安装过程参考了jekyll官网，注意jekyll还有一个简体中文官网，不过比较坑（我就被坑了），有些内容没有翻译过来，有可能会走弯路，建议如果想看中文的相关资料，也要中英对照着阅读。&lt;a href=&quot;http://jekyllcn.com&quot;&gt;jekyll中文网 http://jekyllcn.com&lt;/a&gt;, &lt;a href=&quot;http://jekyllrb.com&quot;&gt;jekyll英文网 http://jekyllrb.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;jekyll中的css是用sass写的，当然直接在&lt;code class=&quot;highlighter-rouge&quot;&gt;_sass/_layout.scss&lt;/code&gt;中添加css也是可以的。&lt;/li&gt;
  &lt;li&gt;本文是用Markdown格式来写的，相关语法可参考： &lt;a href=&quot;http://wowubuntu.com/markdown/&quot;&gt;Markdown 语法说明 (简体中文版) http://wowubuntu.com/markdown/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;按照本文的说明搭建完博客后，用&lt;code class=&quot;highlighter-rouge&quot;&gt;github Pages&lt;/code&gt;托管就可以看到了。注意，在github上面好像不支持rouge，所以要push到github上时，我将配置文件_config.yml中的代码高亮改变为&lt;code class=&quot;highlighter-rouge&quot;&gt;highlighter: pygments&lt;/code&gt;就可以了&lt;/li&gt;
  &lt;li&gt;博客默认是没有评论系统的，本文的评论系统使用了多说，详细安装办法可访问&lt;a href=&quot;http://duoshuo.com/&quot;&gt;多说官网 http://duoshuo.com/&lt;/a&gt;，当然也可以使用&lt;a href=&quot;http://changyan.sohu.com/&quot;&gt;搜狐畅言 http://changyan.sohu.com/&lt;/a&gt;作为评论系统。&lt;/li&gt;
  &lt;li&gt;也可以绑定自己的域名，如果没有域名，可以在&lt;a href=&quot;http://www.godaddy.com/&quot;&gt;godaddy http://www.godaddy.com/&lt;/a&gt;上将域名放入购物车等待降价，买之。&lt;/li&gt;
  &lt;li&gt;祝各位新年快乐！&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;可能出现的问题&quot;&gt;可能出现的问题&lt;/h2&gt;

&lt;h3 id=&quot;hitimeshitimes-loaderror&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;hitimes/hitimes (LoadError)&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;错误代码：&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;markdown&quot;&gt;C:/Ruby22/lib/ruby/2.2.0/rubygems/core_ext/kernel_require.rb:54:in `require&#39;: cannot load such file -- hitimes/hitimes (LoadError)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;解决方法：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在stackoverflow上又一个很好的解决方法。&lt;a href=&quot;http://stackoverflow.com/questions/28985481/hitimes-require-error-when-running-jekyll-serve-on-windows-8-1&quot;&gt;hitimes require error when running jekyll serve on windows 8.1&lt;/a&gt; 虽然上面的题主问的是 win 8.1 系统下的情况，但是同样适用于 win7。下面我简单翻译一下错误原因和解决方法。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;可能是 Ruby 2.2 和 hitimes-1.2.2-x86-mingw32 中有一些 ABI 变化，少了一些相关的类库。&lt;/p&gt;

  &lt;p&gt;所以卸载 hitimes 并通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;--platform ruby&lt;/code&gt; 重装即可。代码如下：&lt;/p&gt;

  &lt;pre&gt;&lt;code class=&quot;markdown&quot;&gt;gem uni hitimes
**Remove ALL versions**
gem ins hitimes -v 1.2.1 --platform ruby
&lt;/code&gt;&lt;/pre&gt;
  &lt;p&gt;然后将自动重新编译 hitimes 并适用于 Ruby 2.2&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;下面是我自己的卸载和安装过程：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;markdown&quot;&gt;E:\GitWorkSpace\gaohaoyang.github.io&amp;gt;gem uni hitimes

You have requested to uninstall the gem:
        hitimes-1.2.2-x86-mingw32

timers-4.0.1 depends on hitimes (&amp;gt;= 0)
If you remove this gem, these dependencies will not be met.
Continue with Uninstall? [yN]  y
Successfully uninstalled hitimes-1.2.2-x86-mingw32

E:\GitWorkSpace\gaohaoyang.github.io&amp;gt;gem ins hitimes -v 1.2.1 --platform ruby
Fetching: hitimes-1.2.1.gem (100%)
Temporarily enhancing PATH to include DevKit...
Building native extensions.  This could take a while...
Successfully installed hitimes-1.2.1
Parsing documentation for hitimes-1.2.1
Installing ri documentation for hitimes-1.2.1
Done installing documentation for hitimes after 1 seconds
1 gem installed&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;关于，&lt;a href=&quot;https://rubygems.org/gems/hitimes/versions/1.2.2&quot;&gt;hitimes&lt;/a&gt; 是一个快速的高效的定时器解决方案库，详情可以去官网查看。&lt;/p&gt;

</description>
        <pubDate>Sun, 15 Feb 2015 14:14:54 -0800</pubDate>
        <link>/2015/02/15/create-my-blog-with-jekyll/</link>
        <guid isPermaLink="true">/2015/02/15/create-my-blog-with-jekyll/</guid>
        
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>hello jekyll!</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def print_hi(name)
  puts &quot;Hi, #{name}&quot;
end
print_hi(&#39;Tom&#39;)
#=&amp;gt; prints &#39;Hi, Tom&#39; to STDOUT.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://github.com/jekyll/jekyll-help&quot;&gt;Jekyll’s dedicated Help repository&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Tue, 10 Feb 2015 07:14:54 -0800</pubDate>
        <link>/2015/02/10/welcome-to-jekyll/</link>
        <guid isPermaLink="true">/2015/02/10/welcome-to-jekyll/</guid>
        
        
        <category>jekyll</category>
        
      </item>
    
  </channel>
</rss>
